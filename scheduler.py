import asyncio
import datetime
from utils import get_db_connection, parse_student_data, save_to_db, logger
from telegram.ext import Application

class StudentParserScheduler:
    def __init__(self, application: Application):
        self.application = application
        self.parsing_queue = asyncio.Queue()
        self.is_running = False
        self.parser_task = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if not self.is_running:
            self.is_running = True
            self.parser_task = asyncio.create_task(self._parser_worker())
            asyncio.create_task(self._schedule_parser())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if self.is_running:
            self.is_running = False
            if self.parser_task:
                self.parser_task.cancel()
                try:
                    await self.parser_task
                except asyncio.CancelledError:
                    pass

    async def _schedule_parser(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                with get_db_connection() as conn:
                    cursor = conn.cursor()
                    current_time = datetime.datetime.now()
                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                    cursor.execute('''
                        SELECT student_id, telegram_id, student_group 
                        FROM students 
                        WHERE last_parsed_time IS NULL 
                        OR datetime(last_parsed_time) <= datetime(?)
                    ''', (current_time - datetime.timedelta(minutes=5),))
                    students = cursor.fetchall()

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å
                for student in students:
                    await self.parsing_queue.put(student)

                # –ñ–¥–µ–º 2 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(5 * 60)  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    def _is_system_telegram_id(self, telegram_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ telegram_id —Å–∏—Å—Ç–µ–º–Ω—ã–º (–¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º)"""
        return telegram_id in ["added by admin", "added_by_superadmin"]

    def _get_existing_course_works(self, student_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT discipline, semester, file_path 
                FROM course_works 
                WHERE student_id = ?
            ''', (student_id,))
            return {(row[0], row[1]): row[2] for row in cursor.fetchall()}

    def _get_student_ratings(self, student_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM students WHERE student_id=?", (student_id,))
            row = cursor.fetchone()
            if not row:
                return None
            columns = [desc[0] for desc in cursor.description]
            return dict(zip(columns, row))

    def _compare_ratings(self, old_ratings, new_ratings):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        changes = []
        if not old_ratings or not new_ratings:
            return changes

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        old_group = old_ratings.get('student_group')
        new_group = new_ratings.get('student_group')
        if old_group != new_group and new_group is not None:
            changes.append({
                'type': 'group',
                'old_value': old_group,
                'new_value': new_group
            })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Ü–µ–Ω–∫–∞—Ö
        for key, new_value in new_ratings.items():
            if "(–º–æ–¥—É–ª—å" in str(key):
                old_value = old_ratings.get(key)
                if old_value != new_value and new_value not in ["–Ω–µ –∏–∑—É—á–∞–µ—Ç", None, "None"]:
                    subject = key.split(' (–º–æ–¥—É–ª—å')[0]
                    module = key.split(' (–º–æ–¥—É–ª—å ')[1].replace(')', '')
                    changes.append({
                        'type': 'grade',
                        'subject': subject,
                        'module': module,
                        'old_value': old_value,
                        'new_value': new_value
                    })
        return changes

    def _format_changes_message(self, name, changes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏"""
        if not changes:
            return None

        message = f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö {name}:\n\n"
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        group_changes = [c for c in changes if c['type'] == 'group']
        if group_changes:
            change = group_changes[0]
            message += f"üë• –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n"
            message += f"   –ë—ã–ª–æ: {change['old_value'] if change['old_value'] else '-'}\n"
            message += f"   –°—Ç–∞–ª–æ: {change['new_value']}\n\n"

        # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Ü–µ–Ω–∫–∞—Ö
        grade_changes = [c for c in changes if c['type'] == 'grade']
        if grade_changes:
            message += "üìö –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏:\n\n"
            for change in grade_changes:
                message += f"üìö {change['subject']} (–º–æ–¥—É–ª—å {change['module']}):\n"
                message += f"   –ë—ã–ª–æ: {change['old_value'] if change['old_value'] not in ['–Ω–µ –∏–∑—É—á–∞–µ—Ç', None, 'None'] else '-'}\n"
                message += f"   –°—Ç–∞–ª–æ: {change['new_value']}\n\n"
        
        return message

    async def _parser_worker(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                student = await self.parsing_queue.get()
                student_id, telegram_id, student_group = student

                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
                    old_ratings = self._get_student_ratings(student_id)

                    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã
                    existing_course_works = self._get_existing_course_works(student_id)

                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
                    name, grades, subjects, course_works = parse_student_data(
                        student_id, 
                        telegram_id=telegram_id,
                        student_group=student_group,
                        skip_existing_course_works=existing_course_works
                    )

                    if name != "Unknown":
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
                        save_to_db(
                            student_id=student_id,
                            name=name,
                            grades=grades,
                            subjects=subjects,
                            telegram_id=telegram_id,
                            student_group=student_group
                        )

                        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Ç–∞–±–ª–∏—Ü–µ course_works
                        with get_db_connection() as conn:
                            cursor = conn.cursor()
                            cursor.execute('''
                                UPDATE course_works 
                                SET student_group = ? 
                                WHERE student_id = ?
                            ''', (student_group, student_id))
                            conn.commit()
                            if cursor.rowcount > 0:
                                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –≤ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {name} (ID: {student_id})")

                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        new_ratings = self._get_student_ratings(student_id)

                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if telegram_id and not self._is_system_telegram_id(telegram_id):
                            changes = self._compare_ratings(old_ratings, new_ratings)
                            if changes:
                                message = self._format_changes_message(name, changes)
                                if message:
                                    try:
                                        await self.application.bot.send_message(
                                            chat_id=telegram_id,
                                            text=message
                                        )
                                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç—É–¥–µ–Ω—Ç—É {name} (ID: {student_id})")
                                    except Exception as e:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É {student_id}: {e}")

                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {name} (ID: {student_id})")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}: {e}")

                finally:
                    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                    self.parsing_queue.task_done()
                    # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                    await asyncio.sleep(5)

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π 