import re
from utils import (
    logger, get_db_connection, check_registration, parse_student_data, save_to_db,
    show_student_rating, format_ratings_table, REPLY_KEYBOARD_MARKUP,
    CANCEL_KEYBOARD_MARKUP, INLINE_KEYBOARD_MARKUP
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

async def handle_message(update, context):
    text = update.message.text.strip()
    logger.info(f"Received message: {text}")

    if text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'")
        context.user_data.clear()
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=INLINE_KEYBOARD_MARKUP
        )
        return

    telegram_id = str(update.effective_user.id)
    
    if context.user_data.get('awaiting_student_id'):
        student_id = text
        context.user_data['temp_student_id'] = student_id
        context.user_data['awaiting_student_id'] = False
        context.user_data['awaiting_group'] = True
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT DISTINCT student_group FROM students WHERE student_group IS NOT NULL AND student_group != ""')
        groups = [row[0] for row in cursor.fetchall() if row[0]]
        conn.close()
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        group_keyboard = [[g] for g in sorted(groups)] if groups else []
        from telegram import ReplyKeyboardMarkup
        reply_markup = ReplyKeyboardMarkup(group_keyboard, resize_keyboard=True, one_time_keyboard=True) if group_keyboard else CANCEL_KEYBOARD_MARKUP
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –ë–û–õ–¨–®–ò–ú–ò –†–£–°–°–ö–ò–ú–ò –ë–£–ö–í–ê–ú–ò, –Ω–∞–ø—Ä–∏–º–µ—Ä –ü–ú–†-231, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ:",
            reply_markup=reply_markup
        )
        return

    if context.user_data.get('awaiting_group'):
        student_group = text.upper()
        student_id = context.user_data.get('temp_student_id')
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if not context.user_data.get('registration_in_progress'):
            context.user_data['registration_in_progress'] = True
            await update.message.reply_text(
                "–ò–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–∞—Ä—Å–∏–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        if 'temp_parsed_student_id' in context.user_data and context.user_data['temp_parsed_student_id'] == student_id:
            name = context.user_data['temp_name']
            grades = context.user_data['temp_grades']
            subjects = context.user_data['temp_subjects']
            course_works = context.user_data['temp_course_works']
        else:
            name, grades, subjects, course_works = parse_student_data(student_id)
            context.user_data['temp_name'] = name
            context.user_data['temp_grades'] = grades
            context.user_data['temp_subjects'] = subjects
            context.user_data['temp_course_works'] = course_works
            context.user_data['temp_parsed_student_id'] = student_id
        if name == "Unknown":
            context.user_data.pop('registration_in_progress', None)
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            context.user_data.clear()
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT COUNT(*) FROM students WHERE student_group=?', (student_group,))
            group_exists = cursor.fetchone()[0] > 0
            is_admin = not group_exists

            save_to_db(
                student_id=student_id,
                name=name,
                grades=grades,
                subjects=subjects,
                telegram_id=telegram_id,
                student_group=student_group,
                is_admin=is_admin
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã
            for cw in course_works:
                from utils import save_course_work_to_db
                save_course_work_to_db(
                    student_id=student_id,
                    name=name,
                    telegram_id=telegram_id,
                    student_group=student_group,
                    discipline=cw.get('discipline'),
                    file_path=cw.get('file_path'),
                    semester=cw.get('semester')
                )
            context.user_data.pop('registration_in_progress', None)
            context.user_data.clear()
            await update.message.reply_text(
                f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã {'—Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' if is_admin else '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤'} –≥—Ä—É–ø–ø—É {student_group}.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        except Exception as e:
            context.user_data.pop('registration_in_progress', None)
            logger.error(f"Error saving group: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()
        return

    if context.user_data.get('awaiting_admin_student_id'):
        student_id = text
        conn = get_db_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT student_group, is_admin FROM students WHERE telegram_id=?', (telegram_id,))
            admin_data = cursor.fetchone()
            if not admin_data or not admin_data[1]:
                await update.message.reply_text(
                    "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                context.user_data.clear()
                return
                
            admin_group = admin_data[0]
            
            cursor.execute('SELECT name, student_group FROM students WHERE student_id=?', (student_id,))
            student_data = cursor.fetchone()
            
            if not student_data:
                name, grades, subjects, course_works = parse_student_data(student_id, telegram_id="added by admin", student_group=admin_group)
                if name == "Unknown":
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                        reply_markup=CANCEL_KEYBOARD_MARKUP
                    )
                    return
                save_to_db(student_id, name, grades, subjects, telegram_id="added by admin", student_group=admin_group)
                await update.message.reply_text(
                    f"–°—Ç—É–¥–µ–Ω—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {admin_group}!",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
            else:
                name, student_group = student_data
                if student_group != admin_group:
                    await update.message.reply_text(
                        f"–°—Ç—É–¥–µ–Ω—Ç {name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ ({student_group}).",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                else:
                    await update.message.reply_text(
                        f"–°—Ç—É–¥–µ–Ω—Ç {name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –≥—Ä—É–ø–ø—ã {admin_group}.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
        except Exception as e:
            logger.error(f"Error processing admin action: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()
            context.user_data.clear()
        return

    if context.user_data.get('awaiting_add_admin_id'):
        student_id = text
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT student_group, is_admin FROM students WHERE telegram_id=?', (telegram_id,))
            admin_data = cursor.fetchone()
            if not admin_data or not admin_data[1]:
                await update.message.reply_text(
                    "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                context.user_data.clear()
                return
            admin_group = admin_data[0]
            cursor.execute('SELECT name, student_group, is_admin FROM students WHERE student_id=?', (student_id,))
            student_data = cursor.fetchone()
            if not student_data:
                name, grades, subjects, course_works = parse_student_data(student_id, telegram_id="added by admin", student_group=admin_group)
                if name == "Unknown":
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                        reply_markup=CANCEL_KEYBOARD_MARKUP
                    )
                    context.user_data.clear()
                    return
                save_to_db(student_id, name, grades, subjects, telegram_id="added by admin", student_group=admin_group, is_admin=True)
                await update.message.reply_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã {admin_group}!",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
            else:
                name, student_group, is_admin_flag = student_data
                if student_group != admin_group:
                    await update.message.reply_text(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ ({student_group}).",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                elif is_admin_flag:
                    await update.message.reply_text(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {admin_group}.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                else:
                    cursor.execute('UPDATE students SET is_admin=1 WHERE student_id=?', (student_id,))
                    conn.commit()
                    await update.message.reply_text(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {admin_group}.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
        except Exception as e:
            logger.error(f"Error processing add admin action: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()
            context.user_data.clear()
        return

    if context.user_data.get('awaiting_add_student_id'):
        student_id = text
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT student_group, is_admin FROM students WHERE telegram_id=?', (telegram_id,))
            admin_data = cursor.fetchone()
            if not admin_data or not admin_data[1]:
                await update.message.reply_text(
                    "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                context.user_data.clear()
                return
            admin_group = admin_data[0]
            cursor.execute('SELECT name, student_group FROM students WHERE student_id=?', (student_id,))
            student_data = cursor.fetchone()
            if not student_data:
                name, grades, subjects, course_works = parse_student_data(student_id, telegram_id="added by admin", student_group=admin_group)
                if name == "Unknown":
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                        reply_markup=CANCEL_KEYBOARD_MARKUP
                    )
                    context.user_data.clear()
                    return
                save_to_db(student_id, name, grades, subjects, telegram_id="added by admin", student_group=admin_group)
                await update.message.reply_text(
                    f"–°—Ç—É–¥–µ–Ω—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {admin_group}!",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
            else:
                name, student_group = student_data
                if student_group != admin_group:
                    await update.message.reply_text(
                        f"–°—Ç—É–¥–µ–Ω—Ç {name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ ({student_group}).",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                else:
                    await update.message.reply_text(
                        f"–°—Ç—É–¥–µ–Ω—Ç {name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –≥—Ä—É–ø–ø—ã {admin_group}.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
        except Exception as e:
            logger.error(f"Error processing add student action: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()
            context.user_data.clear()
        return

    if context.user_data.get('awaiting_superadmin_student_id'):
        student_id = update.message.text.strip()
        context.user_data['temp_superadmin_student_id'] = student_id
        context.user_data['awaiting_superadmin_student_id'] = False
        context.user_data['awaiting_superadmin_group'] = True
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT DISTINCT student_group FROM students WHERE student_group IS NOT NULL AND student_group != ""')
        groups = [row[0] for row in cursor.fetchall() if row[0]]
        conn.close()
        group_keyboard = [[g] for g in sorted(groups)] if groups else []
        from telegram import ReplyKeyboardMarkup
        reply_markup = ReplyKeyboardMarkup(group_keyboard, resize_keyboard=True, one_time_keyboard=True) if group_keyboard else CANCEL_KEYBOARD_MARKUP
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –ë–û–õ–¨–®–ò–ú–ò –†–£–°–°–ö–ò–ú–ò –ë–£–ö–í–ê–ú–ò, –Ω–∞–ø—Ä–∏–º–µ—Ä –ü–ú–†-231, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö:",
            reply_markup=reply_markup
        )
        return
    if context.user_data.get('awaiting_superadmin_group'):
        student_group = update.message.text.strip().upper()
        student_id = context.user_data.get('temp_superadmin_student_id')
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if not context.user_data.get('superadmin_registration_in_progress'):
            context.user_data['superadmin_registration_in_progress'] = True
            await update.message.reply_text(
                "–ò–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–∞—Ä—Å–∏–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        if 'temp_superadmin_parsed_student_id' in context.user_data and context.user_data['temp_superadmin_parsed_student_id'] == student_id:
            name = context.user_data['temp_superadmin_name']
            grades = context.user_data['temp_superadmin_grades']
            subjects = context.user_data['temp_superadmin_subjects']
            course_works = context.user_data['temp_superadmin_course_works']
        else:
            name, grades, subjects, course_works = parse_student_data(student_id)
            context.user_data['temp_superadmin_name'] = name
            context.user_data['temp_superadmin_grades'] = grades
            context.user_data['temp_superadmin_subjects'] = subjects
            context.user_data['temp_superadmin_course_works'] = course_works
            context.user_data['temp_superadmin_parsed_student_id'] = student_id
        if name == "Unknown":
            context.user_data.pop('superadmin_registration_in_progress', None)
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            context.user_data.clear()
            return
        try:
            save_to_db(
                student_id=student_id,
                name=name,
                grades=grades,
                subjects=subjects,
                telegram_id="added_by_superadmin",
                student_group=student_group,
                is_admin=False
            )
            for cw in course_works:
                from utils import save_course_work_to_db
                save_course_work_to_db(
                    student_id=student_id,
                    name=name,
                    telegram_id="added_by_superadmin",
                    student_group=student_group,
                    discipline=cw.get('discipline'),
                    file_path=cw.get('file_path'),
                    semester=cw.get('semester')
                )
            context.user_data.pop('superadmin_registration_in_progress', None)
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {student_group}.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        except Exception as e:
            context.user_data.pop('superadmin_registration_in_progress', None)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        context.user_data.clear()
        return

    # –£–±–∏—Ä–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é...'
    return

async def handle_inline_buttons(update, context):
    query = update.callback_query
    if not query:
        logger.error("No callback_query in update")
        return
    await query.answer()

    callback_data = query.data
    if not callback_data:
        logger.error("No callback_data received")
        return

    logger.info(f"Inline button pressed: {callback_data}")
    telegram_id = str(update.effective_user.id)

    # --- –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º is_superadmin ---
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT student_id, student_group, is_admin, is_superadmin FROM students WHERE telegram_id=?', (telegram_id,))
        student_row = cursor.fetchone()
        if student_row:
            student_id, student_group, is_admin, is_superadmin = student_row
        else:
            student_id, student_group, is_admin, is_superadmin = None, None, 0, 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        student_id, student_group, is_admin, is_superadmin = None, None, 0, 0
    finally:
        conn.close()
    is_registered = student_id is not None

    if not is_registered:
        await update.callback_query.message.reply_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞:\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        context.user_data.clear()
        context.user_data['awaiting_student_id'] = True
        return

    if callback_data == 'my_rating':
        if not is_registered:
            await query.message.reply_text(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT * FROM students WHERE student_id=?", (student_id,))
            row = cursor.fetchone()
            columns = [desc[0] for desc in cursor.description]
            student_data = dict(zip(columns, row))
            name = student_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message = format_ratings_table(name, student_data)
            await query.message.reply_text(message, parse_mode='HTML', reply_markup=REPLY_KEYBOARD_MARKUP)
        except Exception as e:
            logger.error(f"Database error: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()

    elif callback_data == 'group':
        if not is_registered:
            await query.message.reply_text(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT student_id, name FROM students WHERE student_group=? ORDER BY name', (student_group,))
            students = cursor.fetchall()
            keyboard = [[InlineKeyboardButton(name, callback_data=f"student_{student_id}")] for student_id, name in students]
            if is_admin:
                keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data='add_student')])
            await query.message.reply_text(
                f"–°—Ç—É–¥–µ–Ω—Ç—ã –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã ({student_group}):",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Database error in group handler: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()

    elif callback_data == 'disciplines':
        if not is_registered:
            await query.message.reply_text(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT * FROM students WHERE student_id=?", (student_id,))
            row = cursor.fetchone()
            if not row:
                await query.message.reply_text(
                    "–î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            columns = [desc[0] for desc in cursor.description]
            student_data = dict(zip(columns, row))
            disciplines = []
            for col in columns:
                if "(–º–æ–¥—É–ª—å" in col and student_data[col] != "–Ω–µ –∏–∑—É—á–∞–µ—Ç":
                    disc_name = col.split(' (–º–æ–¥—É–ª—å')[0].strip()
                    if disc_name and disc_name not in disciplines:
                        disciplines.append(disc_name)
            if not disciplines:
                await query.message.reply_text(
                    "–í—ã –Ω–µ –∏–∑—É—á–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            # Use short keys for callback_data
            discipline_map = {}
            keyboard = []
            for idx, disc in enumerate(sorted(disciplines)):
                key = f"d{idx}"
                discipline_map[key] = disc
                keyboard.append([InlineKeyboardButton(disc, callback_data=f"discipline_{key}")])
            context.user_data['discipline_map'] = discipline_map
            await query.message.reply_text(
                "–í–∞—à–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Database error in disciplines handler: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()

    elif callback_data.startswith('discipline_'):
        if not is_registered:
            await query.message.reply_text(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        try:
            discipline_key = callback_data[len('discipline_'):]
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {discipline_key}")
            logger.info(f"–¢–µ–∫—É—â–∏–π discipline_map: {context.user_data.get('discipline_map', {})}")
            discipline_name = context.user_data.get('discipline_map', {}).get(discipline_key)
            if not discipline_name:
                logger.error(f"Discipline not found in discipline_map for callback_data: {discipline_key}")
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            conn = None
            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
                result = cursor.fetchone()
                if not result:
                    await query.message.reply_text(
                        "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                    return
                student_group = result[0]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
                module1_col = f'{discipline_name} (–º–æ–¥—É–ª—å 1)'
                module2_col = f'{discipline_name} (–º–æ–¥—É–ª—å 2)'
                cursor.execute('PRAGMA table_info(students)')
                columns_info = [col[1] for col in cursor.fetchall()]
                def normalize_colname(s):
                    return re.sub(r'\s+', ' ', s.strip().lower())
                norm_module1 = normalize_colname(module1_col)
                norm_module2 = normalize_colname(module2_col)
                module1_col_real = next((c for c in columns_info if normalize_colname(c) == norm_module1), None)
                module2_col_real = next((c for c in columns_info if normalize_colname(c) == norm_module2), None)
                if not module1_col_real or not module2_col_real:
                    await query.message.reply_text(
                        f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{discipline_name}' –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                    return
                module1_col_sql = f'"{module1_col_real}"'
                module2_col_sql = f'"{module2_col_real}"'
                sql_query = f'SELECT student_id, name, {module1_col_sql}, {module2_col_sql} FROM students WHERE student_group=? ORDER BY name'
                cursor.execute(sql_query, (student_group,))
                students = cursor.fetchall()
                if not students:
                    await query.message.reply_text(
                        "–í –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö —ç—Ç—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                    return
                group_data = []
                for student in students:
                    student_id, name, m1, m2 = student
                    grades = {
                        f"{discipline_name} (–º–æ–¥—É–ª—å 1)": m1 if m1 not in ["–Ω–µ –∏–∑—É—á–∞–µ—Ç", None, "None"] else "-",
                        f"{discipline_name} (–º–æ–¥—É–ª—å 2)": m2 if m2 not in ["–Ω–µ –∏–∑—É—á–∞–µ—Ç", None, "None"] else "-"
                    }
                    group_data.append((name, grades))
                message = format_ratings_table(discipline_name, group_data, is_group=True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)
                cursor.execute('SELECT COUNT(*) FROM course_works WHERE TRIM(LOWER(discipline))=TRIM(LOWER(?))', (discipline_name,))
                cw_count = cursor.fetchone()[0]
                if cw_count > 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã" —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∫–ª—é—á–æ–º
                    keyboard = [
                        [InlineKeyboardButton("–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã", callback_data=f"courseworks_{discipline_key}")]
                    ]
                    await query.message.reply_text(
                        message,
                        parse_mode='HTML',
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.message.reply_text(
                        message,
                        parse_mode='HTML',
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
            except Exception as e:
                logger.error(f"Error displaying discipline ratings: {e}")
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
            finally:
                if conn:
                    conn.close()
        except Exception as inner_error:
            logger.error(f"Unexpected error in discipline handler: {inner_error}")

    elif callback_data.startswith('courseworks_'):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
        discipline_key = callback_data[len('courseworks_'):]
        discipline_name = context.user_data.get('discipline_map', {}).get(discipline_key)
        if not discipline_name:
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫—É—Ä—Å–æ–≤—ã–µ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥—Ä—É–ø–ø–µ)
            cursor.execute('SELECT name, discipline, file_path, semester, student_group FROM course_works WHERE TRIM(LOWER(discipline))=TRIM(LOWER(?))', (discipline_name,))
            course_works = cursor.fetchall()
            if not course_works:
                await query.message.reply_text(
                    "–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            buttons = []
            coursework_map = {}
            for idx, (name, discipline, file_path, semester, student_group) in enumerate(course_works, 1):
                filename = file_path.split('/')[-1]
                # –û–±—Ä–µ–∑–∞–µ–º –§–ò–û (–≥—Ä—É–ø–ø–∞) –∏ –∏–º—è —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–º–µ—â–∞–ª–∞—Å—å
                fio_group = f"{name} ({student_group})"
                if len(fio_group) > 25:
                    fio_group = fio_group[:22] + '...'
                filename_short = filename
                if len(filename_short) > 30:
                    filename_short = filename_short[:27] + '...'
                btn_text = f"{fio_group}\n{filename_short}"
                cw_key = f"cw{idx}"
                coursework_map[cw_key] = file_path
                buttons.append([InlineKeyboardButton(btn_text, callback_data=f"getcw_{cw_key}")])
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –∞—Ä—Ö–∏–≤–æ–º (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            buttons.append([InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –≤—Å–µ –∞—Ä—Ö–∏–≤–æ–º", callback_data=f"getcwzip_{discipline_key}")])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º map –≤ user_data
            context.user_data['coursework_map'] = coursework_map
            await query.message.reply_text(
                f"<b>–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {discipline_name}:</b>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
    elif callback_data.startswith('getcw_'):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã
        cw_key = callback_data[len('getcw_'):]
        file_path = context.user_data.get('coursework_map', {}).get(cw_key)
        if not file_path:
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.message.reply_text(
            f"–§–∞–π–ª: {file_path} (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)",
            reply_markup=REPLY_KEYBOARD_MARKUP
        )

    elif callback_data.startswith('getcwzip_'):
        # –ó–∞–≥–ª—É—à–∫–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
        discipline_key = callback_data[len('getcwzip_'):]
        # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∞—Ä—Ö–∏–≤–∞
        await query.message.reply_text(
            f"–ê—Ä—Ö–∏–≤ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {discipline_key} (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)",
            reply_markup=REPLY_KEYBOARD_MARKUP
        )
    elif callback_data == 'settings':
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT name, student_group, is_admin, is_superadmin, student_id, telegram_id FROM students WHERE telegram_id=?', (telegram_id,))
            user_row = cursor.fetchone()
            if user_row:
                name, group, is_admin, is_superadmin, student_id_val, user_telegram_id = user_row
                status = "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω" if is_superadmin else ("–ê–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã" if is_admin else "–°—Ç—É–¥–µ–Ω—Ç")
                # –ò—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
                cursor.execute('SELECT name, telegram_id FROM students WHERE student_group=? AND is_admin=1', (group,))
                admin_row = cursor.fetchone()
                if admin_row:
                    admin_name, admin_telegram_id = admin_row
                    admin_info = f"\n<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã:</b> {admin_name} (Telegram ID: {admin_telegram_id})"
                else:
                    admin_info = "\n<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω"
                profile_text = (
                    f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
                    f"–§–ò–û: {name}\n"
                    f"–ì—Ä—É–ø–ø–∞: {group}\n"
                    f"ID: {student_id_val}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}"
                    f"{admin_info}"
                )
            else:
                profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            profile_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."
        finally:
            conn.close()
        await query.message.reply_text(profile_text, parse_mode='HTML', reply_markup=REPLY_KEYBOARD_MARKUP)
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        if is_admin:
            keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='add_admin')])
        if is_superadmin:
            keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã", callback_data='add_other_group_user')])
        if keyboard:
            await query.message.reply_text(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return
    elif callback_data == 'add_other_group_user':
        if not is_superadmin:
            await query.message.reply_text(
                "–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª—é–±—É—é –≥—Ä—É–ø–ø—É:\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        context.user_data['awaiting_superadmin_student_id'] = True
        return
    elif callback_data == 'add_admin':
        if not is_registered or not is_admin:
            await query.message.reply_text(
                "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        context.user_data['awaiting_add_admin_id'] = True
        return
    elif callback_data == 'add_student':
        if not is_admin:
            await query.message.reply_text(
                "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞:\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        context.user_data['awaiting_add_student_id'] = True
        return
    elif callback_data.startswith('student_'):
        student_id = callback_data.split('_')[1]
        await show_student_rating(query, student_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
    # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback_data –±–µ–∑ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    return
