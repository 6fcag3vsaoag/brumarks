import re
import os
import json
import base64
import zipfile
import tempfile
import asyncio
import traceback
from utils import (
    logger, get_db_connection, check_registration, parse_student_data, save_to_db,
    show_student_rating, format_ratings_table, REPLY_KEYBOARD_MARKUP,
    CANCEL_KEYBOARD_MARKUP, INLINE_KEYBOARD_MARKUP, validate_student_id, validate_group_format, validate_student_group, handle_telegram_timeout,
    send_notification_to_users, get_week_type, set_week_type_settings
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from archive_manager import CourseWorkArchiveManager
from datetime import datetime, timedelta

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ –†–ê–°–ü–ò–°–ê–ù–ò–Ø ---
def build_schedule_keyboard(schedule, group, subgroup, week_type, day_type, date_obj=None):
    from telegram import InlineKeyboardButton
    from datetime import datetime
    lessons_data = []
    lesson_buttons = []
    inactive_count = 0
    if not date_obj:
        date_obj = datetime.now()
    week_type_text = "–≤–µ—Ä—Ö–Ω—è—è" if week_type == "UP" else "–Ω–∏–∂–Ω—è—è"
    if day_type == 'today':
        message = f"\U0001F4C5 –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({date_obj.strftime('%d.%m.%Y')})\n"
    else:
        message = f"\U0001F4C5 –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({date_obj.strftime('%d.%m.%Y')})\n"
    message += f"–ì—Ä—É–ø–ø–∞: {group}, –ü–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup}\n"
    message += f"–ù–µ–¥–µ–ª—è: {week_type_text}\n\n"
    for i, lesson in enumerate(schedule, 1):
        if lesson and lesson.strip():
            try:
                data = json.loads(lesson)
                data['number'] = i
                lessons_data.append(data)
                if data.get('type') == 'inactive':
                    inactive_count += 1
                elif data.get('type') == 'window':
                    lesson_buttons.append([InlineKeyboardButton(f"{i}. ü™ü –§–æ—Ä—Ç–æ—á–∫–∞", callback_data=f'lessoninfo_window_{day_type}_{i}')])
                else:
                    discipline = data.get('discipline', data.get('description', '–ü–∞—Ä–∞'))
                    auditory = data.get('auditory', '')
                    btn_text = f"{i}. {discipline}"
                    if auditory:
                        btn_text += f" ({auditory})"
                    lesson_buttons.append([InlineKeyboardButton(btn_text, callback_data=f'lessoninfo_{day_type}_{i}')])
            except Exception:
                lesson_buttons.append([InlineKeyboardButton(f"{i}. {lesson}", callback_data=f'lessoninfo_unknown_{day_type}_{i}')])
        else:
            inactive_count += 1
    if inactive_count == 5:
        message += "–í—ã—Ö–æ–¥–Ω–æ–π\n"
        lesson_buttons = []
    else:
        lesson_buttons.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')])
    return message, lesson_buttons, lessons_data

@handle_telegram_timeout()
async def handle_message(update, context):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")

    if context.user_data.get('awaiting_admin_comment'):
        comment = text.strip()
        params = context.user_data.get('edit_comment')
        if not params:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            context.user_data.pop('awaiting_admin_comment', None)
            return
        subgroup = params['subgroup']
        week_type = params['week_type']
        day = params['day']
        slot = params['slot']
        telegram_id = str(update.effective_user.id)
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            group = result[0]
            group_full_name = f"{group}_sub{subgroup}_{week_type}"
            field = f"{day}_{slot}"
            safe_field = '"' + field.replace('"', '""') + '"'
            cursor.execute(f'SELECT {safe_field} FROM raspisanie WHERE group_full_name=?', (group_full_name,))
            row = cursor.fetchone()
            if row and row[0]:
                try:
                    data = json.loads(row[0])
                except Exception:
                    data = {}
            else:
                data = {}
            data['admin_comment'] = comment
            cursor.execute(f'UPDATE raspisanie SET {safe_field}=? WHERE group_full_name=?', (json.dumps(data, ensure_ascii=False), group_full_name))
            conn.commit()
            await update.message.reply_text(
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ {'—É–¥–∞–ª–µ–Ω' if not comment else '–æ–±–Ω–æ–≤–ª–µ–Ω'}!",
                reply_markup=None
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ admin_comment: {e}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            if 'conn' in locals():
                conn.close()
        # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–ª–∞–≥–∏
        context.user_data.pop('awaiting_admin_comment', None)
        context.user_data.pop('edit_comment', None)
        # –í–µ—Ä–Ω—É—Ç—å –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        # –≠–º—É–ª–∏—Ä—É–µ–º callback –¥–ª—è edit_slot
        class FakeCallbackQuery:
            def __init__(self, user_id, message, subgroup, week_type, day, slot):
                self.data = f'edit_slot_{subgroup}_{week_type}_{day}_{slot}'
                self.message = update.message
                self.from_user = update.effective_user
            async def answer(self):
                pass
        fake_query = FakeCallbackQuery(user_id, update.message, subgroup, week_type, day, slot)
        fake_update = type('FakeUpdate', (), {'callback_query': fake_query, 'effective_user': update.effective_user})()
        await handle_inline_buttons(fake_update, context)
        return

    if text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        context.user_data.clear()
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=INLINE_KEYBOARD_MARKUP
        )
        return

    telegram_id = str(update.effective_user.id)
    
    if context.user_data.get('awaiting_student_id'):
        student_id = text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å student_id
        is_valid, error_message = validate_student_id(student_id)
        if not is_valid:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: {error_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT name, student_group FROM students WHERE student_id=?', (student_id,))
        existing_student = cursor.fetchone()
        if existing_student:
            telegram_id = str(update.effective_user.id)
            # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id –≤ students –∏ course_works
            cursor.execute('UPDATE students SET telegram_id=? WHERE student_id=?', (telegram_id, student_id))
            cursor.execute('UPDATE course_works SET telegram_id=? WHERE student_id=?', (telegram_id, student_id))
            conn.commit()
            conn.close()
            context.user_data.clear()
            await update.message.reply_text(
                f"–í–∞—à Telegram ID –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É {existing_student[0]} (–≥—Ä—É–ø–ø–∞: {existing_student[1]}).",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn.close()
        context.user_data['temp_student_id'] = student_id
        context.user_data['awaiting_student_id'] = False
        context.user_data['awaiting_group'] = True
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT DISTINCT student_group FROM students WHERE student_group IS NOT NULL AND student_group != ""')
        groups = [row[0] for row in cursor.fetchall() if row[0]]
        conn.close()
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        group_keyboard = [[g] for g in sorted(groups)] if groups else []
        from telegram import ReplyKeyboardMarkup
        reply_markup = ReplyKeyboardMarkup(group_keyboard, resize_keyboard=True, one_time_keyboard=True) if group_keyboard else CANCEL_KEYBOARD_MARKUP
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –ë–û–õ–¨–®–ò–ú–ò –†–£–°–°–ö–ò–ú–ò –ë–£–ö–í–ê–ú–ò, –Ω–∞–ø—Ä–∏–º–µ—Ä –ü–ú–†-231, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ:",
            reply_markup=reply_markup
        )
        return

    if context.user_data.get('awaiting_group'):
        student_group = text.upper()
        student_id = context.user_data.get('temp_student_id')
        telegram_id = str(update.effective_user.id)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã
        is_valid_format, format_error = validate_group_format(student_group)
        if not is_valid_format:
            context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['awaiting_student_id'] = True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É student_id
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: {format_error}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –µ–≥–æ –≥—Ä—É–ø–ø—É
        name, grades, subjects, course_works = parse_student_data(student_id)
        if name == "Unknown":
            context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['awaiting_student_id'] = True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É student_id
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≥—Ä—É–ø–ø–µ
        is_valid_group, group_error = validate_student_group(student_id, student_group)
        if not is_valid_group:
            context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['awaiting_student_id'] = True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É student_id
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: {group_error}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º student_id
        cursor.execute('SELECT name FROM students WHERE student_id=?', (student_id,))
        existing_student = cursor.fetchone()
        if existing_student:
            # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id –≤ students –∏ course_works
            cursor.execute('UPDATE students SET telegram_id=? WHERE student_id=?', (telegram_id, student_id))
            cursor.execute('UPDATE course_works SET telegram_id=? WHERE student_id=?', (telegram_id, student_id))
            conn.commit()
            conn.close()
            context.user_data.clear()
            await update.message.reply_text(
                f"–í–∞—à Telegram ID –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É {existing_student[0]}.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if not context.user_data.get('registration_in_progress'):
            context.user_data['registration_in_progress'] = True
            await update.message.reply_text(
                "–ò–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–∞—Ä—Å–∏–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        if 'temp_parsed_student_id' in context.user_data and context.user_data['temp_parsed_student_id'] == student_id:
            name = context.user_data['temp_name']
            grades = context.user_data['temp_grades']
            subjects = context.user_data['temp_subjects']
            course_works = context.user_data['temp_course_works']
        else:
            name, grades, subjects, course_works = parse_student_data(student_id)
            context.user_data['temp_name'] = name
            context.user_data['temp_grades'] = grades
            context.user_data['temp_subjects'] = subjects
            context.user_data['temp_course_works'] = course_works
            context.user_data['temp_parsed_student_id'] = student_id
        if name == "Unknown":
            context.user_data.pop('registration_in_progress', None)
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            context.user_data.clear()
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT COUNT(*) FROM students WHERE student_group=?', (student_group,))
            group_exists = cursor.fetchone()[0] > 0
            is_admin = not group_exists

            save_to_db(
                student_id=student_id,
                name=name,
                grades=grades,
                subjects=subjects,
                telegram_id=telegram_id,
                student_group=student_group,
                is_admin=is_admin
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã
            for cw in course_works:
                from utils import save_course_work_to_db
                save_course_work_to_db(
                    student_id=student_id,
                    name=name,
                    telegram_id=telegram_id,
                    student_group=student_group,
                    discipline=cw.get('discipline'),
                    file_path=cw.get('file_path'),
                    semester=cw.get('semester')
                )
            context.user_data.pop('registration_in_progress', None)
            context.user_data.clear()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            notification_text = (
                "üÜï <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–µ!</b>\n\n"
                f"‚Ä¢ –ò–º—è: {name}\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {student_group}\n"
                f"‚Ä¢ Student ID: {student_id}\n"
                f"‚Ä¢ Telegram ID: {telegram_id}"
            )
            await notify_superadmins(context.application, notification_text)
            
            await update.message.reply_text(
                f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã {'—Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' if is_admin else '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤'} –≥—Ä—É–ø–ø—É {student_group}.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        except Exception as e:
            context.user_data.pop('registration_in_progress', None)
            logger.error(f"Error saving group: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()
        return

    if context.user_data.get('awaiting_admin_student_id'):
        student_id = text
        conn = get_db_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('SELECT student_group, is_admin FROM students WHERE telegram_id=?', (telegram_id,))
            admin_data = cursor.fetchone()
            if not admin_data or not admin_data[1]:
                await update.message.reply_text(
                    "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                context.user_data.clear()
                return
                
            admin_group = admin_data[0]
            
            cursor.execute('SELECT name, student_group FROM students WHERE student_id=?', (student_id,))
            student_data = cursor.fetchone()
            
            if not student_data:
                name, grades, subjects, course_works = parse_student_data(student_id, telegram_id="added by admin", student_group=admin_group)
                if name == "Unknown":
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                        reply_markup=CANCEL_KEYBOARD_MARKUP
                    )
                    return
                save_to_db(student_id, name, grades, subjects, telegram_id="added by admin", student_group=admin_group)
                await update.message.reply_text(
                    f"–°—Ç—É–¥–µ–Ω—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {admin_group}!",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
            else:
                name, student_group = student_data
                if student_group != admin_group:
                    await update.message.reply_text(
                        f"–°—Ç—É–¥–µ–Ω—Ç {name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ ({student_group}).",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                else:
                    await update.message.reply_text(
                        f"–°—Ç—É–¥–µ–Ω—Ç {name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –≥—Ä—É–ø–ø—ã {admin_group}.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
        except Exception as e:
            logger.error(f"Error processing admin action: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()
            context.user_data.clear()
        return

    if context.user_data.get('awaiting_add_admin_id'):
        student_id = text
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT student_group, is_admin FROM students WHERE telegram_id=?', (telegram_id,))
            admin_data = cursor.fetchone()
            if not admin_data or not admin_data[1]:
                await update.message.reply_text(
                    "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                context.user_data.clear()
                return
            admin_group = admin_data[0]
            cursor.execute('SELECT name, student_group, is_admin FROM students WHERE student_id=?', (student_id,))
            student_data = cursor.fetchone()
            if not student_data:
                name, grades, subjects, course_works = parse_student_data(student_id, telegram_id="added by admin", student_group=admin_group)
                if name == "Unknown":
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                        reply_markup=CANCEL_KEYBOARD_MARKUP
                    )
                    context.user_data.clear()
                    return
                save_to_db(student_id, name, grades, subjects, telegram_id="added by admin", student_group=admin_group, is_admin=True)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
                notification_text = (
                    "üÜï <b>–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã!</b>\n\n"
                    f"‚Ä¢ –ò–º—è: {name}\n"
                    f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {admin_group}\n"
                    f"‚Ä¢ Student ID: {student_id}\n"
                    f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã"
                )
                await notify_superadmins(context.application, notification_text)
                
                await update.message.reply_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã {admin_group}!",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
            else:
                name, student_group, is_admin_flag = student_data
                if student_group != admin_group:
                    await update.message.reply_text(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ ({student_group}).",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                elif is_admin_flag:
                    await update.message.reply_text(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {admin_group}.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                else:
                    cursor.execute('UPDATE students SET is_admin=1 WHERE student_id=?', (student_id,))
                    conn.commit()
                    await update.message.reply_text(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {admin_group}.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
        except Exception as e:
            logger.error(f"Error processing add admin action: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()
            context.user_data.clear()
        return

    if context.user_data.get('awaiting_add_student_id'):
        student_id = text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å student_id
        is_valid, error_message = validate_student_id(student_id)
        if not is_valid:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: {error_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT student_group, is_admin FROM students WHERE telegram_id=?', (telegram_id,))
            admin_data = cursor.fetchone()
            if not admin_data or not admin_data[1]:
                await update.message.reply_text(
                    "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                context.user_data.clear()
                return
            admin_group = admin_data[0]
            cursor.execute('SELECT name, student_group FROM students WHERE student_id=?', (student_id,))
            student_data = cursor.fetchone()
            if not student_data:
                name, grades, subjects, course_works = parse_student_data(student_id, telegram_id="added by admin", student_group=admin_group)
                if name == "Unknown":
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                        reply_markup=CANCEL_KEYBOARD_MARKUP
                    )
                    context.user_data.clear()
                    return
                save_to_db(student_id, name, grades, subjects, telegram_id="added by admin", student_group=admin_group)
                from utils import save_course_work_to_db
                for cw in course_works:
                    save_course_work_to_db(
                        student_id=student_id,
                        name=name,
                        telegram_id="added by admin",
                        student_group=admin_group,
                        discipline=cw.get('discipline'),
                        file_path=cw.get('file_path'),
                        semester=cw.get('semester')
                    )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –∞–¥–º–∏–Ω–æ–º
                notification_text = (
                    "üÜï <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>\n\n"
                    f"‚Ä¢ –ò–º—è: {name}\n"
                    f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {admin_group}\n"
                    f"‚Ä¢ Student ID: {student_id}\n"
                    f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã"
                )
                await notify_superadmins(context.application, notification_text)
                
                await update.message.reply_text(
                    f"–°—Ç—É–¥–µ–Ω—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {admin_group}!\n\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
                    reply_markup=CANCEL_KEYBOARD_MARKUP
                )
                # context.user_data['awaiting_add_student_id'] –æ—Å—Ç–∞–≤–ª—è–µ–º True –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞
                return
            else:
                name, student_group = student_data
                if student_group != admin_group:
                    await update.message.reply_text(
                        f"–°—Ç—É–¥–µ–Ω—Ç {name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ ({student_group}).\n\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
                        reply_markup=CANCEL_KEYBOARD_MARKUP
                    )
                    return
                else:
                    await update.message.reply_text(
                        f"–°—Ç—É–¥–µ–Ω—Ç {name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –≥—Ä—É–ø–ø—ã {admin_group}.\n\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
                        reply_markup=CANCEL_KEYBOARD_MARKUP
                    )
                    return
        except Exception as e:
            logger.error(f"Error processing add student action: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()
        return

    if context.user_data.get('awaiting_superadmin_student_id'):
        student_id = update.message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å student_id
        is_valid, error_message = validate_student_id(student_id)
        if not is_valid:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: {error_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            return

        context.user_data['temp_superadmin_student_id'] = student_id
        context.user_data['awaiting_superadmin_student_id'] = False
        context.user_data['awaiting_superadmin_group'] = True
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT DISTINCT student_group FROM students WHERE student_group IS NOT NULL AND student_group != ""')
        groups = [row[0] for row in cursor.fetchall() if row[0]]
        conn.close()
        group_keyboard = [[g] for g in sorted(groups)] if groups else []
        from telegram import ReplyKeyboardMarkup
        reply_markup = ReplyKeyboardMarkup(group_keyboard, resize_keyboard=True, one_time_keyboard=True) if group_keyboard else CANCEL_KEYBOARD_MARKUP
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –ë–û–õ–¨–®–ò–ú–ò –†–£–°–°–ö–ò–ú–ò –ë–£–ö–í–ê–ú–ò, –Ω–∞–ø—Ä–∏–º–µ—Ä –ü–ú–†-231, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö:",
            reply_markup=reply_markup
        )
        return
    if context.user_data.get('awaiting_superadmin_group'):
        student_group = update.message.text.strip().upper()
        student_id = context.user_data.get('temp_superadmin_student_id')
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if not context.user_data.get('superadmin_registration_in_progress'):
            context.user_data['superadmin_registration_in_progress'] = True
            await update.message.reply_text(
                "–ò–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–∞—Ä—Å–∏–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        if 'temp_superadmin_parsed_student_id' in context.user_data and context.user_data['temp_superadmin_parsed_student_id'] == student_id:
            name = context.user_data['temp_superadmin_name']
            grades = context.user_data['temp_superadmin_grades']
            subjects = context.user_data['temp_superadmin_subjects']
            course_works = context.user_data['temp_superadmin_course_works']
        else:
            name, grades, subjects, course_works = parse_student_data(student_id)
            context.user_data['temp_superadmin_name'] = name
            context.user_data['temp_superadmin_grades'] = grades
            context.user_data['temp_superadmin_subjects'] = subjects
            context.user_data['temp_superadmin_course_works'] = course_works
            context.user_data['temp_superadmin_parsed_student_id'] = student_id
        if name == "Unknown":
            context.user_data.pop('superadmin_registration_in_progress', None)
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä VUZ2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            context.user_data.clear()
            return
        try:
            save_to_db(
                student_id=student_id,
                name=name,
                grades=grades,
                subjects=subjects,
                telegram_id="added_by_superadmin",
                student_group=student_group,
                is_admin=False
            )
            for cw in course_works:
                from utils import save_course_work_to_db
                save_course_work_to_db(
                    student_id=student_id,
                    name=name,
                    telegram_id="added_by_superadmin",
                    student_group=student_group,
                    discipline=cw.get('discipline'),
                    file_path=cw.get('file_path'),
                    semester=cw.get('semester')
                )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            notification_text = (
                "üÜï <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>\n\n"
                f"‚Ä¢ –ò–º—è: {name}\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {student_group}\n"
                f"‚Ä¢ Student ID: {student_id}"
            )
            await notify_superadmins(context.application, notification_text)
            
            context.user_data.pop('superadmin_registration_in_progress', None)
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {student_group}.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        except Exception as e:
            context.user_data.pop('superadmin_registration_in_progress', None)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º (user_id: {update.effective_user.id}): {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        context.user_data.clear()
        return

    if context.user_data.get('awaiting_title'):
        if len(text) > 50:
            await update.message.reply_text(
                "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            return
        context.user_data['title'] = text
        context.user_data['awaiting_title'] = False
        context.user_data['awaiting_content'] = True
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        return

    if context.user_data.get('awaiting_content'):
        context.user_data['content'] = text
        context.user_data['awaiting_content'] = False
        context.user_data['awaiting_contacts'] = True
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Telegram, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        return

    if context.user_data.get('awaiting_contacts'):
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º student_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT student_id FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                context.user_data.clear()
                return

            student_id = result[0]
            is_anon = context.user_data.get('announcement_type') == 'create_anon'
            title = context.user_data.get('title')
            content = context.user_data.get('content')
            contacts = text

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            cursor.execute('''
                INSERT INTO blackmarket (student_id, is_anon, title, content, contacts, publication_time)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (student_id, is_anon, title, content, contacts, current_time))
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            announcement_id = cursor.lastrowid

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            cursor.execute('''
                SELECT telegram_id 
                FROM students 
                WHERE blackmarket_announcements = 1 
                AND telegram_id IS NOT NULL 
                AND telegram_id != ? 
                AND telegram_id != "added by admin"
                AND telegram_id != "added_by_superadmin"
            ''', (telegram_id,))
            users_to_notify = cursor.fetchall()

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            preview_length = 200
            content_preview = content[:preview_length] + "..." if len(content) > preview_length else content
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            author_info = "üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ" if is_anon else f"üë§ {name} ({student_group})"
            
            notification = (
                "üîî <b>–ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï –ù–ê BLACK MARKET!</b> üè™\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìå <b>{title}</b>\n\n"
                f"üë• <b>–ê–≤—Ç–æ—Ä:</b> {author_info}\n"
                f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contacts}\n"
                f"‚è∞ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {current_time}\n\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{content_preview}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç—ã–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            success_count = 0
            for (user_telegram_id,) in users_to_notify:
                try:
                    keyboard = InlineKeyboardMarkup([[
                        InlineKeyboardButton("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f'view_{announcement_id}')
                    ]])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ telegram_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
                    try:
                        user_telegram_id_int = int(user_telegram_id)
                    except (ValueError, TypeError):
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_id: {user_telegram_id}")
                        continue

                    await context.application.bot.send_message(
                        chat_id=user_telegram_id_int,
                        text=notification,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
                    success_count += 1
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
                except Exception as e:
                    if "Forbidden: bot was blocked by the user" in str(e):
                        logger.warning(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_telegram_id}")
                    elif "chat not found" in str(e):
                        logger.warning(f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {str(e)}")

            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {success_count} –∏–∑ {len(users_to_notify)}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —á–µ—Ä–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ Black Market", callback_data='black_market')
            ]])
            await update.message.reply_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
                reply_markup=keyboard
            )
            context.user_data.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            context.user_data.clear()
        finally:
            conn.close()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
    if context.user_data.get('editing_discipline'):
        editing_data = context.user_data['editing_discipline']
        disc_num = editing_data['number']
        step = editing_data['step']
        
        if step == 'discipline_name':
            editing_data['discipline'] = text
            editing_data['step'] = 'lector_name'
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–º–Ω–æ–≥–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å —Ç—Ä—É–¥–æ–º –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç –∏–º–µ–Ω–∞, –≤–≤–æ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è):",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            return
            
        elif step == 'lector_name':
            editing_data['lector_name'] = text
            editing_data['step'] = 'auditory'
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
                reply_markup=CANCEL_KEYBOARD_MARKUP
            )
            return
            
        elif step == 'auditory':
            editing_data['auditory'] = text
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            conn = get_db_connection()
            cursor = conn.cursor()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (user_id,))
                result = cursor.fetchone()
                if not result:
                    await update.message.reply_text(
                        "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                    return
                group = result[0]
                # –°–æ–∑–¥–∞–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
                discipline_data = {
                    'discipline': editing_data['discipline'],
                    'lector_name': editing_data['lector_name'],
                    'auditory': editing_data['auditory']
                }
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                cursor.execute(f'''
                    UPDATE disciplines 
                    SET disc_{disc_num}=? 
                    WHERE group_name=?
                ''', (json.dumps(discipline_data), group))
                conn.commit()
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                context.user_data.pop('editing_discipline', None)
                # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–ø–∏—Å–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
                # (–∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥')
                keyboard = []
                cursor.execute('SELECT * FROM disciplines WHERE group_name=?', (group,))
                disciplines = cursor.fetchone()
                cursor.execute('PRAGMA table_info(disciplines)')
                columns = {row[1]: idx for idx, row in enumerate(cursor.fetchall())}
                if disciplines:
                    for i in range(1, 31):
                        disc_field = f'disc_{i}'
                        disc_data = disciplines[columns[disc_field]] if disc_field in columns else None
                        if disc_data:
                            try:
                                disc_info = json.loads(disc_data)
                                if disc_info.get('inactive'):
                                    button_text = f"{i}. inactive"
                                else:
                                    button_text = f"{i}. {disc_info.get('discipline', '–ù–µ –∑–∞–¥–∞–Ω–æ')}"
                            except json.JSONDecodeError:
                                button_text = f"{i}. –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
                        else:
                            button_text = f"{i}. –ù–µ –∑–∞–¥–∞–Ω–æ"
                        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'edit_disc_{i}')])
                else:
                    for i in range(1, 31):
                        keyboard.append([InlineKeyboardButton(f"{i}. –ù–µ –∑–∞–¥–∞–Ω–æ", callback_data=f'edit_disc_{i}')])
                keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')])
                await update.message.reply_text(
                    "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ: {e}")
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
            finally:
                conn.close()
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if context.user_data.get('awaiting_schedule_input'):
        schedule_data = context.user_data.get('editing_schedule', {})
        if not schedule_data:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lessons = text.split('\n')
        lessons = [lesson.strip() for lesson in lessons if lesson.strip()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
        valid_lessons = []
        for lesson in lessons:
            if not lesson.startswith(('1.', '2.', '3.', '4.', '5.')):
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—ã (1-5) –∏ —Ç–æ—á–∫–∏.",
                    reply_markup=CANCEL_KEYBOARD_MARKUP
                )
                return
            valid_lessons.append(lesson[2:].strip())  # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏ —Ç–æ—á–∫—É

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã
        while len(valid_lessons) < 5:
            valid_lessons.append('')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑—É
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (user_id,))
            group_result = cursor.fetchone()
            if not group_result:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return

            group = group_result[0]
            day = schedule_data['day']
            subgroup = schedule_data['subgroup']
            week_type = schedule_data['week_type']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            cursor.execute('''
                SELECT 1 FROM raspisanie 
                WHERE group_full_name=? AND subgroup=? AND week_type=?
            ''', (group, subgroup, week_type))
            exists = cursor.fetchone()

            if exists:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                updates = []
                values = []
                for i, lesson in enumerate(valid_lessons, 1):
                    updates.append(f"{day}_{i}=?")
                    values.append(lesson)
                values.extend([group, subgroup, week_type])
                
                query = f'''
                    UPDATE raspisanie 
                    SET {', '.join(updates)}
                    WHERE group_full_name=? AND subgroup=? AND week_type=?
                '''
                cursor.execute(query, values)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                columns = [f"{day}_{i}" for i in range(1, 6)]
                placeholders = ['?'] * 5
                values = valid_lessons + [group, subgroup, week_type]
                
                query = f'''
                    INSERT INTO raspisanie (
                        {', '.join(columns)},
                        group_full_name, subgroup, week_type
                    ) VALUES ({', '.join(placeholders)}, ?, ?, ?)
                '''
                cursor.execute(query, values)

            conn.commit()
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            context.user_data.pop('awaiting_schedule_input', None)
            context.user_data.pop('editing_schedule', None)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='edit_schedule')]])
            await update.message.reply_text(
                "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
    return

@handle_telegram_timeout()
async def handle_inline_buttons(update, context):
    query = update.callback_query
    if not query:
        logger.error("No callback_query in update")
        return
    await query.answer()

    callback_data = query.data
    if not callback_data:
        logger.error("No callback_data received")
        return

    user_id = update.effective_user.id
    logger.info(f"–ù–∞–∂–∞—Ç–∞ inline –∫–Ω–æ–ø–∫–∞ {callback_data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    telegram_id = str(update.effective_user.id)

    # --- –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º is_superadmin ---
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT student_id, student_group, is_admin, is_superadmin FROM students WHERE telegram_id=?', (telegram_id,))
        student_row = cursor.fetchone()
        if student_row:
            student_id, student_group, is_admin, is_superadmin = student_row
        else:
            student_id, student_group, is_admin, is_superadmin = None, None, 0, 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        student_id, student_group, is_admin, is_superadmin = None, None, 0, 0
    finally:
        conn.close()
    is_registered = student_id is not None

    if not is_registered:
        await update.callback_query.message.reply_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞:\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        context.user_data.clear()
        context.user_data['awaiting_student_id'] = True
        return

    if callback_data == 'my_rating':
        if not is_registered:
            await query.message.reply_text(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT * FROM students WHERE student_id=?", (student_id,))
            row = cursor.fetchone()
            columns = [desc[0] for desc in cursor.description]
            student_data = dict(zip(columns, row))
            name = student_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message = format_ratings_table(name, student_data)
            await query.message.reply_text(message, parse_mode='HTML', reply_markup=REPLY_KEYBOARD_MARKUP)
        except Exception as e:
            logger.error(f"Database error: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()

    elif callback_data == 'group':
        if not is_registered:
            await query.message.reply_text(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT student_id, name FROM students WHERE student_group=? ORDER BY name', (student_group,))
            students = cursor.fetchall()
            keyboard = [[InlineKeyboardButton(name, callback_data=f"student_{student_id}")] for student_id, name in students]
            if is_admin:
                keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data='add_student')])
            await query.message.reply_text(
                f"–°—Ç—É–¥–µ–Ω—Ç—ã –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã ({student_group}):",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Database error in group handler (user_id: {update.effective_user.id}): {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()

    elif callback_data == 'disciplines':
        if not is_registered:
            await query.message.reply_text(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT * FROM students WHERE student_id=?", (student_id,))
            row = cursor.fetchone()
            if not row:
                await query.message.reply_text(
                    "–î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            columns = [desc[0] for desc in cursor.description]
            student_data = dict(zip(columns, row))
            disciplines = []
            for col in columns:
                if "(–º–æ–¥—É–ª—å" in col and student_data[col] != "–Ω–µ –∏–∑—É—á–∞–µ—Ç":
                    disc_name = col.split(' (–º–æ–¥—É–ª—å')[0].strip()
                    if disc_name and disc_name not in disciplines:
                        disciplines.append(disc_name)
            if not disciplines:
                await query.message.reply_text(
                    "–í—ã –Ω–µ –∏–∑—É—á–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            # Use short keys for callback_data
            discipline_map = {}
            keyboard = []
            for idx, disc in enumerate(sorted(disciplines)):
                key = f"d{idx}"
                discipline_map[key] = disc
                keyboard.append([InlineKeyboardButton(disc, callback_data=f"discipline_{key}")])
            context.user_data['discipline_map'] = discipline_map
            await query.message.reply_text(
                "–í–∞—à–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Database error in disciplines handler (user_id: {update.effective_user.id}): {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()

    elif callback_data.startswith('discipline_'):
        if not is_registered:
            await query.message.reply_text(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        try:
            discipline_key = callback_data[len('discipline_'):]
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {discipline_key}")
            logger.info(f"–¢–µ–∫—É—â–∏–π discipline_map: {context.user_data.get('discipline_map', {})}")
            discipline_name = context.user_data.get('discipline_map', {}).get(discipline_key)
            if not discipline_name:
                logger.error(f"Discipline not found in discipline_map for callback_data: {discipline_key}")
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            conn = None
            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
                result = cursor.fetchone()
                if not result:
                    await query.message.reply_text(
                        "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                    return
                student_group = result[0]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
                module1_col = f'{discipline_name} (–º–æ–¥—É–ª—å 1)'
                module2_col = f'{discipline_name} (–º–æ–¥—É–ª—å 2)'
                cursor.execute('PRAGMA table_info(students)')
                columns_info = [col[1] for col in cursor.fetchall()]
                def normalize_colname(s):
                    return re.sub(r'\s+', ' ', s.strip().lower())
                norm_module1 = normalize_colname(module1_col)
                norm_module2 = normalize_colname(module2_col)
                module1_col_real = next((c for c in columns_info if normalize_colname(c) == norm_module1), None)
                module2_col_real = next((c for c in columns_info if normalize_colname(c) == norm_module2), None)
                if not module1_col_real or not module2_col_real:
                    await query.message.reply_text(
                        f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{discipline_name}' –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                    return
                module1_col_sql = f'"{module1_col_real}"'
                module2_col_sql = f'"{module2_col_real}"'
                sql_query = f'SELECT student_id, name, {module1_col_sql}, {module2_col_sql} FROM students WHERE student_group=? ORDER BY name'
                cursor.execute(sql_query, (student_group,))
                students = cursor.fetchall()
                if not students:
                    await query.message.reply_text(
                        "–í –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö —ç—Ç—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.",
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
                    return
                group_data = []
                for student in students:
                    student_id, name, m1, m2 = student
                    grades = {
                        f"{discipline_name} (–º–æ–¥—É–ª—å 1)": m1 if m1 not in ["–Ω–µ –∏–∑—É—á–∞–µ—Ç", None, "None"] else "-",
                        f"{discipline_name} (–º–æ–¥—É–ª—å 2)": m2 if m2 not in ["–Ω–µ –∏–∑—É—á–∞–µ—Ç", None, "None"] else "-"
                    }
                    group_data.append((name, grades))
                message = format_ratings_table(discipline_name, group_data, is_group=True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)
                cursor.execute('SELECT COUNT(*) FROM course_works WHERE TRIM(LOWER(discipline))=TRIM(LOWER(?))', (discipline_name,))
                cw_count = cursor.fetchone()[0]
                if cw_count > 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã" —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∫–ª—é—á–æ–º
                    keyboard = [
                        [InlineKeyboardButton("–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã", callback_data=f"courseworks_{discipline_key}")]
                    ]
                    await query.message.reply_text(
                        message,
                        parse_mode='HTML',
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.message.reply_text(
                        message,
                        parse_mode='HTML',
                        reply_markup=REPLY_KEYBOARD_MARKUP
                    )
            except Exception as e:
                logger.error(f"Error displaying discipline ratings (user_id: {update.effective_user.id}): {e}")
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
            finally:
                if conn:
                    conn.close()
        except Exception as inner_error:
            logger.error(f"Unexpected error in discipline handler: {inner_error}")

    elif callback_data.startswith('courseworks_'):
        # --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ---
        discipline_key = callback_data[len('courseworks_'):]
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        logger.info(f"courseworks_: discipline_key={discipline_key}")
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ –∫–ª—é—á—É –∏–∑ user_data
        discipline_name = context.user_data.get('discipline_map', {}).get(discipline_key)
        logger.info(f"courseworks_: discipline_name={discipline_name}")
        if not discipline_name:
            logger.error(f"courseworks_: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ –∫–ª—é—á—É {discipline_key}. discipline_map={context.user_data.get('discipline_map', {})}")
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥—Ä—É–ø–ø–µ)
            cursor.execute('SELECT name, discipline, file_path, semester, student_group FROM course_works WHERE TRIM(LOWER(discipline))=TRIM(LOWER(?))', (discipline_name,))
            course_works = cursor.fetchall()
            logger.info(f"courseworks_: –Ω–∞–π–¥–µ–Ω–æ {len(course_works)} –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {discipline_name}")
            if not course_works:
                await query.message.reply_text(
                    "–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            buttons = []
            coursework_map = {}
            for idx, (name, discipline, file_path, semester, student_group) in enumerate(course_works, 1):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∞—Ä—Ö–∏–≤–∞ –±–µ–∑ –ø–∞–ø–∫–∏
                filename = os.path.basename(file_path)
                btn_text = filename
                cw_key = f"cw{idx}"
                norm_file_path = os.path.normpath(file_path) if file_path else file_path
                coursework_map[cw_key] = norm_file_path
                logger.info(f"courseworks_: –¥–æ–±–∞–≤–ª–µ–Ω coursework_map[{cw_key}]={norm_file_path}")
                buttons.append([InlineKeyboardButton(btn_text, callback_data=f"getcw_{cw_key}")])
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –∞—Ä—Ö–∏–≤–æ–º
            buttons.append([InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –≤—Å–µ –∞—Ä—Ö–∏–≤–æ–º", callback_data=f"getcwzip_{discipline_key}")])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º map –≤ user_data
            context.user_data['coursework_map'] = coursework_map
            logger.info(f"courseworks_: coursework_map={coursework_map}")
            await query.message.reply_text(
                f"<b>–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {discipline_name}:</b>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç (user_id: {update.effective_user.id}): {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
    elif callback_data.startswith('getcw_'):
        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã ---
        cw_key = callback_data[len('getcw_'):]
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π map
        file_path = context.user_data.get('coursework_map', {}).get(cw_key)
        norm_file_path = os.path.normpath(file_path) if file_path else file_path
        logger.info(f"getcw_: cw_key={cw_key}, file_path={norm_file_path}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏
        file_exists = norm_file_path and os.path.isfile(norm_file_path)
        logger.info(f"getcw_: file_exists={file_exists}")
        if not norm_file_path or not file_exists:
            logger.error(f"getcw_: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. coursework_map={context.user_data.get('coursework_map', {})}")
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        try:
            with open(norm_file_path, 'rb') as f:
                logger.info(f"getcw_: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ {norm_file_path}")
                await query.message.reply_document(f, filename=os.path.basename(norm_file_path))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {norm_file_path}: {e}")
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )

    elif callback_data.startswith('getcwzip_'):
        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ---
        discipline_key = callback_data[len('getcwzip_'):]
        logger.info(f"getcwzip_: discipline_key={discipline_key}")
        discipline_name = context.user_data.get('discipline_map', {}).get(discipline_key)
        logger.info(f"getcwzip_: discipline_name={discipline_name}")
        
        if not discipline_name:
            logger.error(f"getcwzip_: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ –∫–ª—é—á—É {discipline_key}. discipline_map={context.user_data.get('discipline_map', {})}")
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        status_message = await query.message.reply_text(
            "‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏."
        )

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Ä—Ö–∏–≤–æ–≤
            archive_manager = CourseWorkArchiveManager()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            archive_paths, is_updated, info_message = await archive_manager.get_or_create_archive(discipline_name)
            
            if not archive_paths:
                await status_message.edit_text(info_message, reply_markup=REPLY_KEYBOARD_MARKUP)
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT archive_parts FROM course_work_archives WHERE discipline=?', (discipline_name,))
                result = cursor.fetchone()
                if result and result[0]:
                    try:
                        archive_paths = json.loads(result[0])
                    except json.JSONDecodeError:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON –¥–ª—è archive_parts: {result[0]}")
                        archive_paths = []

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            total_parts = len(archive_paths)
            if total_parts > 1:
                await status_message.edit_text(
                    f"{info_message}\n"
                    "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤ –≤ Telegram..."
                )
            else:
                await status_message.edit_text(
                    f"{info_message}\n"
                    "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ –≤ Telegram..."
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            for i, archive_path in enumerate(archive_paths, 1):
                if not os.path.exists(archive_path):
                    logger.error(f"–§–∞–π–ª –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {archive_path}")
                    continue

                file_size = os.path.getsize(archive_path)
                if file_size > 50 * 1024 * 1024:  # 50MB
                    logger.error(f"–ê—Ä—Ö–∏–≤ {archive_path} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (—Ä–∞–∑–º–µ—Ä: {file_size/1024/1024:.2f}MB)")
                    continue

                if total_parts > 1:
                    await status_message.edit_text(
                        f"{info_message}\n"
                        f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏ {i} –∏–∑ {total_parts}..."
                    )
                    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–∞—Å—Ç–∏ {i} –∏–∑ {total_parts} –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{discipline_name}'")

                try:
                    with open(archive_path, 'rb') as f:
                        filename = os.path.basename(archive_path)
                        caption = "‚úÖ –ê—Ä—Ö–∏–≤ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!"
                        if total_parts > 1:
                            caption = f"‚úÖ –ß–∞—Å—Ç—å {i} –∏–∑ {total_parts} –∞—Ä—Ö–∏–≤–∞ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç"
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ {filename} (—á–∞—Å—Ç—å {i} –∏–∑ {total_parts})")
                        await query.message.reply_document(
                            f,
                            filename=filename,
                            caption=caption
                        )
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {filename} (—á–∞—Å—Ç—å {i} –∏–∑ {total_parts})")
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞—Å—Ç–µ–π
                        if i < total_parts:
                            await asyncio.sleep(1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞ {archive_path}: {e}")
                    if "Request Entity Too Large" in str(e):
                        await query.message.reply_text(
                            f"‚ùå –ß–∞—Å—Ç—å {i} –∞—Ä—Ö–∏–≤–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        )
                    continue
            
            # –ï—Å–ª–∏ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if total_parts > 1:
                logger.info(f"–í—Å–µ —á–∞—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è '{discipline_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                await query.message.reply_text(
                    "‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n"
                    "üìù –î–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ —Å–∫–∞—á–∞–π—Ç–µ –≤—Å–µ —á–∞—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä."
                )

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.delete()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∞—Ä—Ö–∏–≤–æ–º –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç (user_id: {update.effective_user.id}): {e}")
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞—Ä—Ö–∏–≤–∞."
            if "Request Entity Too Large" in str(e):
                error_message = (
                    "‚ùå –ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏."
                )
            await status_message.edit_text(
                error_message,
                reply_markup=REPLY_KEYBOARD_MARKUP
            )

    elif callback_data == 'settings':
        keyboard = []
        keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ", callback_data='profile_info')])
        keyboard.append([InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data='notifications_menu')])
        keyboard.append([InlineKeyboardButton("üè™ Black Market", callback_data='black_market')])
        keyboard.append([InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É", callback_data='set_subgroup')])
        
        if is_admin:
            keyboard.append([InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='add_admin')])
        
        if is_superadmin:
            keyboard.append([InlineKeyboardButton("üìÖ –ó–∞–¥–∞—Ç—å —Ç–∏–ø –Ω–µ–¥–µ–ª–∏", callback_data='set_week_type')])
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã", callback_data='add_other_group_user')])
            keyboard.append([InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data='send_notification')])
            keyboard.append([InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –±–æ—Ç–∞", callback_data='get_bot_log')])
        
        await query.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    elif callback_data == 'set_subgroup':
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
        subgroup_keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–≥—Ä—É–ø–ø–∞ 1", callback_data='choose_subgroup_1')],
            [InlineKeyboardButton("–ü–æ–¥–≥—Ä—É–ø–ø–∞ 2", callback_data='choose_subgroup_2')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')]
        ]
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–æ–¥–≥—Ä—É–ø–ø—É:",
            reply_markup=InlineKeyboardMarkup(subgroup_keyboard)
        )
        return

    elif callback_data.startswith('choose_subgroup_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
        chosen = callback_data.split('_')[-1]
        if chosen not in ('1', '2'):
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã.")
            return
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('UPDATE students SET subgroup=? WHERE telegram_id=?', (chosen, telegram_id))
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        finally:
            conn.close()
        await query.message.reply_text(f"–í–∞—à–∞ –ø–æ–¥–≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {chosen}")
        return

    elif callback_data == 'schedule':
        keyboard = []
        keyboard.append([InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ù–∞ –°–µ–≥–æ–¥–Ω—è", callback_data='schedule_today')])
        keyboard.append([InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ù–∞ –ó–∞–≤—Ç—Ä–∞", callback_data='schedule_tomorrow')])
        keyboard.append([InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ù–∞ –ù–µ–¥–µ–ª—é", callback_data='schedule_week')])
        
        if is_admin:
            keyboard.append([InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='edit_schedule')])
            keyboard.append([InlineKeyboardButton("üìö –ó–∞–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω", callback_data='setup_disciplines')])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')])
        
        await query.message.reply_text(
            "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    elif callback_data == 'setup_disciplines':
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
                
            group = result[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã
            cursor.execute('SELECT * FROM disciplines WHERE group_name=?', (group,))
            disciplines = cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            cursor.execute('PRAGMA table_info(disciplines)')
            columns = {row[1]: idx for idx, row in enumerate(cursor.fetchall())}
            
            keyboard = []
            if disciplines:
                for i in range(1, 31):
                    disc_field = f'disc_{i}'
                    disc_data = disciplines[columns[disc_field]] if disc_field in columns else None
                    if disc_data:
                        try:
                            disc_info = json.loads(disc_data)
                            if disc_info.get('inactive'):
                                button_text = f"{i}. inactive"
                            else:
                                button_text = f"{i}. {disc_info.get('discipline', '–ù–µ –∑–∞–¥–∞–Ω–æ')}"
                        except json.JSONDecodeError:
                            button_text = f"{i}. –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
                    else:
                        button_text = f"{i}. –ù–µ –∑–∞–¥–∞–Ω–æ"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=f'edit_disc_{i}')])
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –≥—Ä—É–ø–ø—ã
                cursor.execute('INSERT INTO disciplines (group_name) VALUES (?)', (group,))
                conn.commit()
                for i in range(1, 31):
                    keyboard.append([InlineKeyboardButton(f"{i}. –ù–µ –∑–∞–¥–∞–Ω–æ", callback_data=f'edit_disc_{i}')])
            
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')])
            
            await query.message.reply_text(
                "üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data.startswith('edit_disc_'):
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        disc_num = callback_data.split('_')[2]
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f'setup_disc_{disc_num}')],
            [InlineKeyboardButton("‚ùå –°–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π", callback_data=f'deactivate_disc_{disc_num}')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='setup_disciplines')]
        ]
        
        await query.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {disc_num}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    elif callback_data.startswith('deactivate_disc_'):
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        disc_num = callback_data.split('_')[2]
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
                
            group = result[0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
            cursor.execute(f'''
                UPDATE disciplines 
                SET disc_{disc_num}=? 
                WHERE group_name=?
            ''', (json.dumps({'inactive': True}), group))
            conn.commit()
            
            await query.message.reply_text(
                "‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='setup_disciplines')]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data.startswith('setup_disc_'):
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        disc_num = callback_data.split('_')[2]
        context.user_data['editing_discipline'] = {
            'number': disc_num,
            'step': 'discipline_name'
        }
        
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        return

    elif callback_data == 'schedule_today':
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT student_group, subgroup FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
                
            group, subgroup = result
            if not subgroup:
                subgroup = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            weekday = datetime.now().strftime('%A').lower()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            week_type = get_week_type()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            group_full_name = f"{group}_sub{subgroup}_{week_type}"
            cursor.execute(f'''
                SELECT {weekday}_1, {weekday}_2, {weekday}_3, {weekday}_4, {weekday}_5
                FROM raspisanie 
                WHERE group_full_name=?
            ''', (group_full_name,))
            schedule = cursor.fetchone()
            
            if not schedule:
                await query.message.reply_text(
                    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')]])
                )
                return
                
            message, lesson_buttons, lessons_data = build_schedule_keyboard(schedule, group, subgroup, week_type, 'today')
            if lesson_buttons:
                await query.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(lesson_buttons)
                )
            else:
                await query.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')]])
                )
            context.user_data['lessons_today'] = lessons_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data == 'schedule_tomorrow':
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT student_group, subgroup FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return

            group, subgroup = result
            if not subgroup:
                subgroup = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞

            now = datetime.now()
            today_weekday = now.strftime('%A').lower()
            tomorrow = now + timedelta(days=1)

            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π –Ω–µ–¥–µ–ª–∏
            if today_weekday == 'sunday':
                weekday = 'monday'
                week_type = get_week_type()
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ç–∏–ø –Ω–µ–¥–µ–ª–∏
                week_type = "DOWN" if week_type == "UP" else "UP"
                # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
                days_until_monday = (7 - now.weekday()) % 7 or 7
                next_monday = now + timedelta(days=days_until_monday)
                date_obj = next_monday
            else:
                weekday = tomorrow.strftime('%A').lower()
                week_type = get_week_type()
                date_obj = tomorrow

            group_full_name = f"{group}_sub{subgroup}_{week_type}"
            cursor.execute(f'''
                SELECT {weekday}_1, {weekday}_2, {weekday}_3, {weekday}_4, {weekday}_5
                FROM raspisanie 
                WHERE group_full_name=?
            ''', (group_full_name,))
            schedule = cursor.fetchone()

            if not schedule:
                await query.message.reply_text(
                    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')]])
                )
                return

            message, lesson_buttons, lessons_data = build_schedule_keyboard(schedule, group, subgroup, week_type, 'tomorrow', date_obj=date_obj)
            if lesson_buttons:
                await query.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(lesson_buttons)
                )
            else:
                await query.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')]])
                )
            context.user_data['lessons_tomorrow'] = lessons_data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data.startswith('lessoninfo_today_') or callback_data.startswith('lessoninfo_window_today_'):
        num = int(callback_data.rsplit('_', 1)[-1])
        lessons = context.user_data.get('lessons_today', [])
        if callback_data.startswith('lessoninfo_window_today_'):
            await query.message.reply_text("–§–æ—Ä—Ç–æ—á–∫–∞ —ç—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Å –ø–æ–ª—å–∑–æ–π. –ü–æ—Å–∏–¥–∏ –æ—Ç–¥–æ—Ö–Ω–∏, –ø–æ–¥—É–º–∞–π –∫–∞–∫ —Ç—ã –¥–æ–∫–∞—Ç–∏–ª—Å—è –¥–æ —Ç–∞–∫–æ–π –∂–∏–∑–Ω–∏.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule_today')]]))
        elif 0 < num <= len(lessons):
            data = lessons[num-1]
            discipline = data.get('discipline', data.get('description', '–ü–∞—Ä–∞'))
            auditory = data.get('auditory', '‚Äî')
            lecturer = data.get('lector_name') or data.get('lecturer', '‚Äî')
            comment = data.get('admin_comment') if 'admin_comment' in data else data.get('comment', '')
            msg = f"<b>{discipline}</b>\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: {auditory}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lecturer}"
            if comment:
                msg += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            await query.message.reply_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule_today')]]))
        return
    elif callback_data.startswith('lessoninfo_tomorrow_') or callback_data.startswith('lessoninfo_window_tomorrow_'):
        num = int(callback_data.rsplit('_', 1)[-1])
        lessons = context.user_data.get('lessons_tomorrow', [])
        if callback_data.startswith('lessoninfo_window_tomorrow_'):
            await query.message.reply_text("–§–æ—Ä—Ç–æ—á–∫–∞ —ç—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Å –ø–æ–ª—å–∑–æ–π. –ü–æ—Å–∏–¥–∏ –æ—Ç–¥–æ—Ö–Ω–∏, –ø–æ–¥—É–º–∞–π –∫–∞–∫ —Ç—ã –¥–æ–∫–∞—Ç–∏–ª—Å—è –¥–æ —Ç–∞–∫–æ–π –∂–∏–∑–Ω–∏.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule_tomorrow')]]))
        elif 0 < num <= len(lessons):
            data = lessons[num-1]
            discipline = data.get('discipline', data.get('description', '–ü–∞—Ä–∞'))
            auditory = data.get('auditory', '‚Äî')
            lecturer = data.get('lector_name') or data.get('lecturer', '‚Äî')
            comment = data.get('admin_comment') if 'admin_comment' in data else data.get('comment', '')
            msg = f"<b>{discipline}</b>\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: {auditory}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lecturer}"
            if comment:
                msg += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            await query.message.reply_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule_tomorrow')]]))
        return
    elif callback_data == 'schedule_week':
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT student_group, subgroup FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
                
            group, subgroup = result
            if not subgroup:
                subgroup = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏
            week_type = get_week_type()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
            group_full_name = f"{group}_sub{subgroup}_{week_type}"
            cursor.execute('''
                SELECT * FROM raspisanie 
                WHERE group_full_name=?
            ''', (group_full_name,))
            schedule = cursor.fetchone()
            
            if not schedule:
                await query.message.reply_text(
                    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')]])
                )
                return
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            week_type_text = "–≤–µ—Ä—Ö–Ω—è—è" if week_type == "UP" else "–Ω–∏–∂–Ω—è—è"
            message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ({week_type_text})\n"
            message += f"–ì—Ä—É–ø–ø–∞: {group}, –ü–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup}\n\n"
            
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            day_columns = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']

            columns = [desc[0] for desc in cursor.description]
            schedule_dict = dict(zip(columns, schedule))

            for day_name, day_col in zip(days, day_columns):
                lessons = []
                active_lessons = []
                inactive_count = 0
                for i in range(1, 6):
                    lesson = schedule_dict.get(f"{day_col}_{i}")
                    if lesson and lesson.strip():
                        try:
                            data = json.loads(lesson)
                            if data.get('type') == 'inactive':
                                inactive_count += 1
                            elif data.get('type') == 'window':
                                active_lessons.append(f"{i}. ü™ü –§–æ—Ä—Ç–æ—á–∫–∞")
                            else:
                                active_lessons.append(f"{i}. {data.get('discipline', data.get('description', '–ü–∞—Ä–∞'))}")
                        except Exception:
                            active_lessons.append(f"{i}. {lesson}")
                    else:
                        inactive_count += 1
                message += f"\n{day_name}:\n"
                if inactive_count == 5:
                    message += "–í—ã—Ö–æ–¥–Ω–æ–π\n"
                else:
                    message += "\n".join(active_lessons) + "\n"

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(message) > 4096:
                parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
                for part in parts[:-1]:
                    await query.message.reply_text(part)
                await query.message.reply_text(
                    parts[-1],
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')]])
                )
            else:
                await query.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')]])
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data == 'edit_schedule':
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        keyboard = [
            [InlineKeyboardButton("1Ô∏è‚É£ –ü–æ–¥–≥—Ä—É–ø–ø–∞ 1 (–≤–µ—Ä—Ö–Ω—è—è –Ω–µ–¥–µ–ª—è)", callback_data='edit_schedule_1_UP')],
            [InlineKeyboardButton("1Ô∏è‚É£ –ü–æ–¥–≥—Ä—É–ø–ø–∞ 1 (–Ω–∏–∂–Ω—è—è –Ω–µ–¥–µ–ª—è)", callback_data='edit_schedule_1_DOWN')],
            [InlineKeyboardButton("2Ô∏è‚É£ –ü–æ–¥–≥—Ä—É–ø–ø–∞ 2 (–≤–µ—Ä—Ö–Ω—è—è –Ω–µ–¥–µ–ª—è)", callback_data='edit_schedule_2_UP')],
            [InlineKeyboardButton("2Ô∏è‚É£ –ü–æ–¥–≥—Ä—É–ø–ø–∞ 2 (–Ω–∏–∂–Ω—è—è –Ω–µ–¥–µ–ª—è)", callback_data='edit_schedule_2_DOWN')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='schedule')]
        ]
        
        await query.message.reply_text(
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –∏ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    elif callback_data.startswith('edit_schedule_'):
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return

        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä: edit_schedule_1_UP)
        parts = callback_data.split('_')
        subgroup = parts[2]
        week_type = parts[3]
        logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}, —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ {week_type}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
                
            group = result[0]
            group_full_name = f"{group}_sub{subgroup}_{week_type}"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ group_full_name: {group_full_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            cursor.execute('''
                SELECT * FROM raspisanie 
                WHERE group_full_name=?
            ''', (group_full_name,))
            schedule = cursor.fetchone()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {bool(schedule)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            cursor.execute('PRAGMA table_info(raspisanie)')
            columns = {row[1]: idx for idx, row in enumerate(cursor.fetchall())}
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã raspisanie: {list(columns.keys())}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏ –ø–∞—Ä—ã
            keyboard = []
            days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
            
            for day in days:
                day_buttons = []
                for i in range(1, 6):
                    field = f"{day}_{i}"
                    button_text = field
                    if schedule and field in columns:
                        value = schedule[columns[field]]
                        if value:
                            try:
                                data = json.loads(value)
                                if data.get('type') == 'inactive':
                                    button_text = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
                                elif data.get('type') == 'window':
                                    button_text = "ü™ü –§–æ—Ä—Ç–æ—á–∫–∞"
                                else:
                                    button_text = data.get('discipline', field)
                            except json.JSONDecodeError:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è {field}: {value}")
                                button_text = field
                    
                    day_buttons.append(InlineKeyboardButton(
                        button_text, 
                        callback_data=f'edit_slot_{subgroup}_{week_type}_{day}_{i}'
                    ))
                keyboard.append(day_buttons)
            
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='edit_schedule')])
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(keyboard)-1} —Å—Ç—Ä–æ–∫–∞–º–∏ –ø–æ {len(keyboard[0])} –∫–Ω–æ–ø–æ–∫")
            
            await query.message.reply_text(
                f"üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
                f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup}\n"
                f"–ù–µ–¥–µ–ª—è: {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'UP' else '–Ω–∏–∂–Ω—è—è'}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}\n{traceback.format_exc()}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data.startswith('edit_slot_'):
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: edit_slot_1_UP_monday_1)
        try:
            parts = callback_data.split('_')
            subgroup = parts[2]
            week_type = parts[3]
            day = parts[4]
            slot = parts[5]
            logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞: –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}, —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ {week_type}, –¥–µ–Ω—å {day}, —Å–ª–æ—Ç {slot}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ callback_data '{callback_data}': {str(e)}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ó–∞–¥–∞—Ç—å –ø–∞—Ä—É", callback_data=f'set_lesson_{subgroup}_{week_type}_{day}_{slot}')],
            [InlineKeyboardButton("ü™ü –§–æ—Ä—Ç–æ—á–∫–∞", callback_data=f'set_window_{subgroup}_{week_type}_{day}_{slot}')],
            [InlineKeyboardButton("‚ùå –°–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π", callback_data=f'set_inactive_{subgroup}_{week_type}_{day}_{slot}')],
            [InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f'set_comment_{subgroup}_{week_type}_{day}_{slot}')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f'edit_schedule_{subgroup}_{week_type}')]
        ]
        
        await query.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–ª–æ—Ç–∞ {day}_{slot}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    elif callback_data.startswith('set_comment_'):
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        try:
            parts = callback_data.split('_')
            subgroup = parts[2]
            week_type = parts[3]
            day = parts[4]
            slot = parts[5]
            context.user_data['edit_comment'] = {
                'subgroup': subgroup,
                'week_type': week_type,
                'day': day,
                'slot': slot
            }
            await query.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è {day}_{slot} (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π):",
                reply_markup=None
            )
            context.user_data['awaiting_admin_comment'] = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        return
    elif callback_data.startswith('set_lesson_'):
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            parts = callback_data.split('_')
            subgroup = parts[2]
            week_type = parts[3]
            day = parts[4]
            slot = parts[5]
            logger.info(f"–í—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è —Å–ª–æ—Ç–∞: –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}, —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ {week_type}, –¥–µ–Ω—å {day}, —Å–ª–æ—Ç {slot}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ callback_data '{callback_data}': {str(e)}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
                
            group = result[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã
            cursor.execute('SELECT * FROM disciplines WHERE group_name=?', (group,))
            disciplines = cursor.fetchone()
            
            if not disciplines:
                await query.message.reply_text(
                    "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f'edit_slot_{subgroup}_{week_type}_{day}_{slot}')
                    ]])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            cursor.execute('PRAGMA table_info(disciplines)')
            columns = {row[1]: idx for idx, row in enumerate(cursor.fetchall())}
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏
            keyboard = []
            for i in range(1, 31):
                disc_field = f'disc_{i}'
                if disc_field in columns and disciplines[columns[disc_field]]:
                    try:
                        disc_data = json.loads(disciplines[columns[disc_field]])
                        if not disc_data.get('inactive'):
                            keyboard.append([InlineKeyboardButton(
                                disc_data.get('discipline', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                                callback_data=f'assign_lesson_{subgroup}_{week_type}_{day}_{slot}_{i}'
                            )])
                    except json.JSONDecodeError:
                        continue
            
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f'edit_slot_{subgroup}_{week_type}_{day}_{slot}')])
            
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data.startswith('assign_lesson_'):
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            parts = callback_data.split('_')
            subgroup = parts[2]
            week_type = parts[3]
            day = parts[4]
            slot = parts[5]
            disc_num = parts[6]
            logger.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {disc_num} –¥–ª—è —Å–ª–æ—Ç–∞: –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}, —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ {week_type}, –¥–µ–Ω—å {day}, —Å–ª–æ—Ç {slot}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ callback_data '{callback_data}': {str(e)}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
                
            group = result[0]
            group_full_name = f"{group}_sub{subgroup}_{week_type}"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
            cursor.execute(f'SELECT disc_{disc_num} FROM disciplines WHERE group_name=?', (group,))
            disc_data = cursor.fetchone()
            if not disc_data or not disc_data[0]:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            
            discipline_info = json.loads(disc_data[0])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            cursor.execute('SELECT 1 FROM raspisanie WHERE group_full_name=?', (group_full_name,))
            exists = cursor.fetchone()
            
            if exists:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(f'''
                    UPDATE raspisanie 
                    SET {day}_{slot}=? 
                    WHERE group_full_name=?
                ''', (json.dumps(discipline_info), group_full_name))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(f'''
                    INSERT INTO raspisanie (group_full_name, {day}_{slot})
                    VALUES (?, ?)
                ''', (group_full_name, json.dumps(discipline_info)))
            
            conn.commit()
            
            await query.message.reply_text(
                "‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f'edit_schedule_{subgroup}_{week_type}')
                ]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data.startswith('set_window_') or callback_data.startswith('set_inactive_'):
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            parts = callback_data.split('_')
            action = parts[1]  # window –∏–ª–∏ inactive
            subgroup = parts[2]
            week_type = parts[3]
            day = parts[4]
            slot = parts[5]
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ {action} –¥–ª—è —Å–ª–æ—Ç–∞: –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}, —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ {week_type}, –¥–µ–Ω—å {day}, —Å–ª–æ—Ç {slot}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ callback_data '{callback_data}': {str(e)}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
                
            group = result[0]
            group_full_name = f"{group}_sub{subgroup}_{week_type}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
            if action == 'window':
                data = {
                    'type': 'window',
                    'description': '–§–æ—Ä—Ç–æ—á–∫–∞ (–ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏)'
                }
                status_text = "—Ñ–æ—Ä—Ç–æ—á–∫–æ–π (–ø–µ—Ä–µ—Ä—ã–≤)"
            else:  # inactive
                data = {
                    'type': 'inactive',
                    'description': '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞ (–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π)'
                }
                status_text = "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π (–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            cursor.execute('SELECT 1 FROM raspisanie WHERE group_full_name=?', (group_full_name,))
            exists = cursor.fetchone()
            
            if exists:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(f'''
                    UPDATE raspisanie 
                    SET {day}_{slot}=? 
                    WHERE group_full_name=?
                ''', (json.dumps(data), group_full_name))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(f'''
                    INSERT INTO raspisanie (group_full_name, {day}_{slot})
                    VALUES (?, ?)
                ''', (group_full_name, json.dumps(data)))
            
            conn.commit()
            
            await query.message.reply_text(
                f"‚úÖ –ü–∞—Ä–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ {status_text}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f'edit_schedule_{subgroup}_{week_type}')
                ]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—ã: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—ã.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data == 'edit_disciplines':
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('SELECT student_group FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if not result:
                await query.message.reply_text(
                    "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
                
            group = result[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã
            cursor.execute('SELECT discipline_name, short_name FROM disciplines WHERE group_full_name=?', (group,))
            disciplines = cursor.fetchall()
            
            keyboard = []
            for discipline, short_name in disciplines:
                display_name = f"{discipline} ({short_name})" if short_name else discipline
                keyboard.append([InlineKeyboardButton(display_name, callback_data=f'edit_discipline_{discipline}')])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data='add_discipline')])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='edit_schedule')])
            
            await query.message.reply_text(
                "üìö –°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data == 'profile_info':
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT name, student_group, is_admin, is_superadmin, student_id, notifications FROM students WHERE telegram_id=?', (telegram_id,))
            user_row = cursor.fetchone()
            if user_row:
                name, group, is_admin, is_superadmin, student_id_val, notifications = user_row
                status = "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω" if is_superadmin else ("–ê–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã" if is_admin else "–°—Ç—É–¥–µ–Ω—Ç")
                notifications_status = "–≤–∫–ª—é—á–µ–Ω—ã" if notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
                
                # –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_stats = ""
                if is_superadmin:
                    cursor.execute('SELECT COUNT(*) FROM students')
                    total_users = cursor.fetchone()[0]
                    cursor.execute('SELECT COUNT(*) FROM students WHERE telegram_id IS NOT NULL AND telegram_id != "added by admin"')
                    active_users = cursor.fetchone()[0]
                    users_stats = f"\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}"
                
                # –ò—â–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
                cursor.execute('SELECT name FROM students WHERE student_group=? AND is_admin=1', (group,))
                admin_rows = cursor.fetchall()
                admin_info = "\nAdmin_list:"
                for (admin_name,) in admin_rows:
                    admin_info += f"\n‚Ä¢ {admin_name}"
                
                # --- –ë–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è —Å–≤—è–∑–∏ ---
                admin_help_block = (
                    "\n\n"
                    "<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n"
                    "–ï—Å–ª–∏ –≤—ã:\n"
                    "‚Ä¢ –ù–∞—à–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –±–∞–≥ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n"
                    "‚Ä¢ –ï—Å—Ç—å –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\n"
                    "‚Ä¢ –•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã\n\n"
                    "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
                    "üìß Email: 6fcag3vsaoag@mail.ru\n"
                    "üì± Telegram: <a href='https://t.me/bycard1'>@bycard1</a>\n"
                )
                profile_text = (
                    f"üìö –°–∞–π—Ç –ë–æ—Ç–∞: <a href='https://6fcag3vsaoag.github.io/brumarks/'>6fcag3vsaoag.github.io</a>\n\n\n"
                    f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
                    f"Name: {name}\n"
                    f"Group: {group}\n"
                    f"Student_ID: {student_id_val}\n"
                    f"Status: {status}\n"
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}"
                    f"{admin_info}"
                    f"{users_stats}"
                    f"{admin_help_block}\n\n"
                )
            else:
                profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å."

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="settings")
            ]])
            
            await query.message.reply_text(
                profile_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data == 'notifications_menu':
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notification_settings')],
            [InlineKeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Black Market", callback_data='blackmarket_notifications')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')]
        ])
        await query.message.reply_text(
            "üîî –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=keyboard
        )
        return

    elif callback_data == 'blackmarket_notifications':
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data='blackmarket_notifications_on'),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data='blackmarket_notifications_off')
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='notifications_menu')]
        ])
        await query.message.reply_text(
            "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Black Market\n\n"
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö?",
            reply_markup=keyboard
        )
        return

    elif callback_data in ['blackmarket_notifications_on', 'blackmarket_notifications_off']:
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            new_value = 1 if callback_data == 'blackmarket_notifications_on' else 0
            cursor.execute('UPDATE students SET blackmarket_announcements=? WHERE telegram_id=?', (new_value, telegram_id))
            conn.commit()
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="notifications_menu")
            ]])
            await query.message.reply_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Black Market {status}.",
                reply_markup=back_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Black Market: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data == 'black_market':
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            cursor.execute('''
                SELECT bm.id, bm.title 
                FROM blackmarket bm 
                ORDER BY bm.publication_time DESC
            ''')
            announcements = cursor.fetchall()
            
            keyboard = []
            for announcement_id, title in announcements:
                keyboard.append([InlineKeyboardButton(title, callback_data=f'view_{announcement_id}')])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            cursor.execute('SELECT blackmarket_allowed FROM students WHERE telegram_id=?', (telegram_id,))
            result = cursor.fetchone()
            if result and result[0] == 1:
                keyboard.append([InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data='create_announcement')])
            
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')])
            
            if not keyboard:  # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
                keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')]]
                await query.message.reply_text(
                    "üè™ Black Market\n\n"
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await query.message.reply_text(
                    "üè™ Black Market\n\n"
                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Black Market: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data.startswith('view_'):
        try:
            announcement_id = int(callback_data.split('_')[1])
            conn = get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT bm.student_id, bm.is_anon, bm.title, bm.content, bm.contacts, bm.publication_time,
                       s.name, s.student_group, s.telegram_id as author_telegram_id
                FROM blackmarket bm 
                JOIN students s ON bm.student_id = s.student_id 
                WHERE bm.id = ?
            ''', (announcement_id,))
            announcement = cursor.fetchone()
            
            if not announcement:
                await query.message.reply_text(
                    "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='black_market')]])
                )
                return
                
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            student_id, is_anon, title, content, contacts, pub_time, author_name, author_group, author_telegram_id = announcement
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            author_text = "üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ" if is_anon else f"üë§ {author_name} ({author_group})"
            message_text = (
                f"<b>{title}</b>\n\n"
                f"–ê–≤—Ç–æ—Ä: {author_text}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}\n\n"
                f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{content}\n\n"
                f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {pub_time}"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            if telegram_id == author_telegram_id or is_superadmin:
                if is_superadmin:
                    keyboard.append([
                        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'del_{announcement_id}'),
                        InlineKeyboardButton("‚õîÔ∏è –£–¥–∞–ª–∏—Ç—å –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'delblock_{announcement_id}')
                    ])
                else:
                    keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'del_{announcement_id}')])
            
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='black_market')])
            
            await query.message.reply_text(
                message_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            if 'conn' in locals():
                conn.close()
        return

    elif callback_data.startswith('del_'):
        if callback_data.startswith('delblock_'):
            return
        try:
            announcement_id = int(callback_data.split('_')[1])
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'confirm_del_{announcement_id}'),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'view_{announcement_id}')
                ]
            ])
            await query.message.reply_text(
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        return

    elif callback_data.startswith('delblock_'):
        try:
            announcement_id = int(callback_data.split('_')[1])
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'confirm_delblock_{announcement_id}'),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'view_{announcement_id}')
                ]
            ])
            await query.message.reply_text(
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        return

    elif callback_data.startswith('confirm_del_'):
        try:
            announcement_id = int(callback_data.split('_')[2])
            conn = get_db_connection()
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            cursor.execute('DELETE FROM blackmarket WHERE id=?', (announcement_id,))
            conn.commit()
            
            await query.message.reply_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='black_market')]])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            if 'conn' in locals():
                conn.close()
        return

    elif callback_data.startswith('confirm_delblock_'):
        try:
            announcement_id = int(callback_data.split('_')[2])
            conn = get_db_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º student_id –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            cursor.execute('SELECT student_id FROM blackmarket WHERE id=?', (announcement_id,))
            result = cursor.fetchone()
            if result:
                student_id = result[0]
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('UPDATE students SET blackmarket_allowed=0 WHERE student_id=?', (student_id,))
                # –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                cursor.execute('DELETE FROM blackmarket WHERE id=?', (announcement_id,))
                conn.commit()
                
                await query.message.reply_text(
                    "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='black_market')]])
                )
            else:
                await query.message.reply_text(
                    "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            if 'conn' in locals():
                conn.close()
        return

    elif callback_data == 'create_announcement':
        rules_text = (
            "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>\n\n"
            "0. –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "1. –Ω–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏ –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–æ–¥–µ–∫—Å–æ–º –†–ë –∏ –†–§ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏\n"
            "2. –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥\n"
            "3. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ –±—ã –æ–±—å—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —Å–≤—è–∑–∞–Ω–æ —Å —É–Ω–∏–≤–µ—Ä–æ–º –∏ –±—ã–ª–æ —Ö–æ—Ç—å –∫–æ–º—É-—Ç–æ –∏–∑ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≥–∞—Ä–∞–∂–∞ –µ—Å—Ç—å –∫—É—Ñ–∞—Ä.\n"
            "4. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞–ª–∏ –±—É–º–∞–≥—É –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏–±–µ–≥–∞—Ç—å –∫ –ø–æ–º–æ—â–∏ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç\n"
            "5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ —É–¥–∞–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü—Ä–∏—á–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–æ–±—â–µ –ª–∏—à–∏—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Ö –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\n\n"
            "–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?"
        )
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data='accept_rules'),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='black_market')
            ]
        ])
        await query.message.reply_text(rules_text, parse_mode='HTML', reply_markup=keyboard)
        return

    elif callback_data == 'accept_rules':
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üë§ –ü–æ–∫–∞–∑–∞—Ç—å –∏–º—è –∏ –≥—Ä—É–ø–ø—É", callback_data='create_public'),
                InlineKeyboardButton("üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ", callback_data='create_anon')
            ],
            [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data='black_market')]
        ])
        await query.message.reply_text(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
            reply_markup=keyboard
        )
        return

    elif callback_data in ['create_public', 'create_anon']:
        context.user_data['announcement_type'] = callback_data
        context.user_data['creating_announcement'] = True
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        context.user_data['awaiting_title'] = True
        return

    elif callback_data == 'send_notification':
        if not is_superadmin:
            await query.message.reply_text(
                "–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send_notification"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings")
        ]])
        
        await query.message.reply_text(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            parse_mode='HTML',
            reply_markup=confirm_keyboard
        )
        return
        
    elif callback_data == 'confirm_send_notification':
        if not is_superadmin:
            await query.message.reply_text(
                "–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        back_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="settings")
        ]])
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        status_message = await query.message.reply_text(
            "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            reply_markup=back_keyboard
        )
        
        try:
            success, success_count, fail_count = await send_notification_to_users(context.application)
            if success:
                total = success_count + fail_count
                await status_message.edit_text(
                    f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total}",
                    reply_markup=back_keyboard
                )
            else:
                await status_message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=back_keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_keyboard
            )
        return

    elif callback_data == 'get_bot_log':
        if not is_superadmin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        try:
            with open('bot.log', 'rb') as f:
                await query.message.reply_document(f, filename='bot.log')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–∞.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        return

    elif callback_data == 'notification_settings':
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data='notifications_on'),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data='notifications_off')
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='notifications_menu')]
        ])
        await query.message.reply_text(
            "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö?",
            reply_markup=keyboard
        )
        return

    elif callback_data in ['notifications_on', 'notifications_off']:
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            new_value = 1 if callback_data == 'notifications_on' else 0
            cursor.execute('UPDATE students SET notifications=? WHERE telegram_id=?', (new_value, telegram_id))
            conn.commit()
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="notifications_menu")
            ]])
            await query.message.reply_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                f"–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}.",
                reply_markup=back_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data == 'send_notification':
        if not is_superadmin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        context.user_data['awaiting_notification'] = True
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        return

    elif callback_data == 'notify_all':
        if not is_superadmin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        context.user_data['notification_type'] = 'all'
        context.user_data['awaiting_notification'] = True
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        return

    elif callback_data == 'notify_group':
        if not is_superadmin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT DISTINCT student_group FROM students WHERE student_group IS NOT NULL ORDER BY student_group')
            groups = cursor.fetchall()
            keyboard = []
            for (group,) in groups:
                keyboard.append([InlineKeyboardButton(group, callback_data=f'notify_group_{group}')])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='send_notification')])
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
        finally:
            conn.close()
        return

    elif callback_data.startswith('notify_group_'):
        if not is_superadmin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        group = callback_data[len('notify_group_'):]
        context.user_data['notification_type'] = 'group'
        context.user_data['notification_group'] = group
        context.user_data['awaiting_notification'] = True
        await query.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        return

    elif callback_data == 'add_student':
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        context.user_data['awaiting_add_student_id'] = True
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        return

    elif callback_data == 'add_admin':
        if not is_admin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        context.user_data['awaiting_add_admin_id'] = True
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        return

    elif callback_data == 'add_other_group_user':
        if not is_superadmin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        context.user_data['awaiting_superadmin_student_id'] = True
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            reply_markup=CANCEL_KEYBOARD_MARKUP
        )
        return

    elif callback_data.startswith('student_'):
        student_id = callback_data.split('_')[1]
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT * FROM students WHERE student_id=?", (student_id,))
            row = cursor.fetchone()
            if not row:
                await query.message.reply_text(
                    "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=REPLY_KEYBOARD_MARKUP
                )
                return
            columns = [desc[0] for desc in cursor.description]
            student_data = dict(zip(columns, row))
            name = student_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message = format_ratings_table(name, student_data)
            await query.message.reply_text(message, parse_mode='HTML', reply_markup=REPLY_KEYBOARD_MARKUP)
        except Exception as e:
            logger.error(f"Database error: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        finally:
            conn.close()
        return

    elif callback_data == 'set_week_type':
        if not is_superadmin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT value FROM bot_settings WHERE key=?', ('week_type',))
            result = cursor.fetchone()
            settings = json.loads(result[0]) if result else {'current_type': 'UP', 'auto_switch': True}
            
        current_type = settings['current_type']
        auto_switch = settings.get('auto_switch', True)
        last_change = settings.get('last_change', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        keyboard = [
            [
                InlineKeyboardButton("‚¨ÜÔ∏è –ó–∞–¥–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é", callback_data='set_week_up'),
                InlineKeyboardButton("‚¨áÔ∏è –ó–∞–¥–∞—Ç—å –Ω–∏–∂–Ω—é—é", callback_data='set_week_down')
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')]
        ]
        
        await query.message.reply_text(
            f"üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–º –Ω–µ–¥–µ–ª–∏\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {'–í–µ—Ä—Ö–Ω—è—è' if current_type == 'UP' else '–ù–∏–∂–Ω—è—è'}\n"
            f"–ê–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if auto_switch else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {last_change}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
        
    elif callback_data in ['set_week_up', 'set_week_down']:
        if not is_superadmin:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
            
        new_type = 'UP' if callback_data == 'set_week_up' else 'DOWN'
        set_week_type_settings(new_type=new_type)
        
        keyboard = [
            [
                InlineKeyboardButton("‚¨ÜÔ∏è –ó–∞–¥–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é", callback_data='set_week_up'),
                InlineKeyboardButton("‚¨áÔ∏è –ó–∞–¥–∞—Ç—å –Ω–∏–∂–Ω—é—é", callback_data='set_week_down')
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')]
        ]
        
        await query.message.reply_text(
            f"‚úÖ –¢–∏–ø –Ω–µ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –Ω–µ–¥–µ–ª–∏: {'–í–µ—Ä—Ö–Ω—è—è' if new_type == 'UP' else '–ù–∏–∂–Ω—è—è'}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

@handle_telegram_timeout()
async def settings_menu(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    if not is_superadmin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT value FROM bot_settings WHERE key=?', ('week_type',))
        result = cursor.fetchone()
        settings = json.loads(result[0]) if result else {'current_type': 'UP', 'auto_switch': True}

    current_type = settings['current_type']
    auto_switch = settings.get('auto_switch', True)

    keyboard = [
        [
            InlineKeyboardButton("üìÖ –¢–∏–ø –Ω–µ–¥–µ–ª–∏: " + ("–í–µ—Ä—Ö–Ω—è—è" if current_type == 'UP' else "–ù–∏–∂–Ω—è—è"), 
                               callback_data='toggle_week_type')
        ],
        [
            InlineKeyboardButton("üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: " + ("–í–∫–ª." if auto_switch else "–í—ã–∫–ª."), 
                               callback_data='toggle_auto_switch')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏:\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {'–í–µ—Ä—Ö–Ω—è—è' if current_type == 'UP' else '–ù–∏–∂–Ω—è—è'}\n"
        f"–ê–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if auto_switch else '–í—ã–∫–ª—é—á–µ–Ω–æ'}",
        reply_markup=reply_markup
    )

@handle_telegram_timeout()
async def handle_settings_callback(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()

    if not is_superadmin(query.from_user.id):
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.")
        return

    if query.data == 'toggle_week_type':
        current_settings = set_week_type_settings(
            new_type='DOWN' if get_week_type() == 'UP' else 'UP'
        )
        new_type = current_settings['current_type']
        auto_switch = current_settings['auto_switch']

    elif query.data == 'toggle_auto_switch':
        current_settings = set_week_type_settings(
            auto_switch=not json.loads(
                get_db_connection().execute(
                    'SELECT value FROM bot_settings WHERE key=?', 
                    ('week_type',)
                ).fetchone()[0]
            )['auto_switch']
        )
        new_type = current_settings['current_type']
        auto_switch = current_settings['auto_switch']

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –¢–∏–ø –Ω–µ–¥–µ–ª–∏: " + ("–í–µ—Ä—Ö–Ω—è—è" if new_type == 'UP' else "–ù–∏–∂–Ω—è—è"), 
                               callback_data='toggle_week_type')
        ],
        [
            InlineKeyboardButton("üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: " + ("–í–∫–ª." if auto_switch else "–í—ã–∫–ª."), 
                               callback_data='toggle_auto_switch')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏:\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {'–í–µ—Ä—Ö–Ω—è—è' if new_type == 'UP' else '–ù–∏–∂–Ω—è—è'}\n"
        f"–ê–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if auto_switch else '–í—ã–∫–ª—é—á–µ–Ω–æ'}",
        reply_markup=reply_markup
    )