import sqlite3
import shutil
import os
from datetime import datetime
import json

def backup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_path = f'students_backup_{timestamp}.db'
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã
        if not os.path.exists('students.db'):
            print("‚ùå –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        shutil.copy2('students.db', backup_path)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def migrate_database():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        conn = sqlite3.connect('students.db')
        cursor = conn.cursor()

        print("\nüîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ subgroup...")
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ subgroup –≤ —Ç–∞–±–ª–∏—Ü—É students
            cursor.execute('''
                ALTER TABLE students 
                ADD COLUMN subgroup INTEGER DEFAULT 1
            ''')
            conn.commit()
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ subgroup –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except sqlite3.OperationalError as e:
            if "duplicate column name" in str(e).lower():
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ subgroup —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ students")
            else:
                raise
        
        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã raspisanie...")
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS raspisanie (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                group_full_name TEXT NOT NULL,
                       
                monday_1 TEXT,
                monday_2 TEXT,
                monday_3 TEXT,
                monday_4 TEXT,
                monday_5 TEXT,
                
                tuesday_1 TEXT,
                tuesday_2 TEXT,
                tuesday_3 TEXT,
                tuesday_4 TEXT,
                tuesday_5 TEXT,
                
                wednesday_1 TEXT,
                wednesday_2 TEXT,
                wednesday_3 TEXT,
                wednesday_4 TEXT,
                wednesday_5 TEXT,
                
                thursday_1 TEXT,
                thursday_2 TEXT,
                thursday_3 TEXT,
                thursday_4 TEXT,
                thursday_5 TEXT,
                
                friday_1 TEXT,
                friday_2 TEXT,
                friday_3 TEXT,
                friday_4 TEXT,
                friday_5 TEXT,
                
                saturday_1 TEXT,
                saturday_2 TEXT,
                saturday_3 TEXT,
                saturday_4 TEXT,
                saturday_5 TEXT,
                
                sunday_1 TEXT,
                sunday_2 TEXT,
                sunday_3 TEXT,
                sunday_4 TEXT,
                sunday_5 TEXT,
                
                UNIQUE(group_full_name)
            )
        ''')
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã raspisanie
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='raspisanie'")
        if cursor.fetchone():
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ raspisanie —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            raise Exception("–¢–∞–±–ª–∏—Ü–∞ raspisanie –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")

        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã disciplines...")
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS disciplines (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                group_name TEXT NOT NULL,
                disc_1 TEXT,
                disc_2 TEXT,
                disc_3 TEXT,
                disc_4 TEXT,
                disc_5 TEXT,
                disc_6 TEXT,
                disc_7 TEXT,
                disc_8 TEXT,
                disc_9 TEXT,
                disc_10 TEXT,
                disc_11 TEXT,
                disc_12 TEXT,
                disc_13 TEXT,
                disc_14 TEXT,
                disc_15 TEXT,
                disc_16 TEXT,
                disc_17 TEXT,
                disc_18 TEXT,
                disc_19 TEXT,
                disc_20 TEXT,
                disc_21 TEXT,
                disc_22 TEXT,
                disc_23 TEXT,
                disc_24 TEXT,
                disc_25 TEXT,
                disc_26 TEXT,
                disc_27 TEXT,
                disc_28 TEXT,
                disc_29 TEXT,
                disc_30 TEXT,
                UNIQUE(group_name)
            )
        ''')
        conn.commit()
        
        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã bot_settings...")
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_settings (
                key TEXT PRIMARY KEY,
                value TEXT NOT NULL,
                updated_at TEXT NOT NULL
            )
        ''')
        conn.commit()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute('INSERT OR IGNORE INTO bot_settings (key, value, updated_at) VALUES (?, ?, ?)',
            ('week_type', json.dumps({
                'current_type': 'UP',
                'last_change': datetime.now().isoformat(),
                'auto_switch': True
            }), datetime.now().isoformat())
        )
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã bot_settings
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='bot_settings'")
        if cursor.fetchone():
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ bot_settings —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            raise Exception("–¢–∞–±–ª–∏—Ü–∞ bot_settings –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")

        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    finally:
        conn.close()

def main():
    print("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("------------------------------------------")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if backup_database():
        # –ï—Å–ª–∏ –±—ç–∫–∞–ø —É—Å–ø–µ—à–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        print("\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        print("------------------------------------------")
        migrate_database()
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print("\n------------------------------------------")
    print("‚ú® –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main() 