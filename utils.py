import sqlite3
import requests
import os
from bs4 import BeautifulSoup
import datetime
import json
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
import re
from functools import wraps
import asyncio
import functools
from telegram.error import TimedOut, NetworkError
import random
import traceback

# Logging configuration
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)

file_handler = logging.FileHandler('bot.log', encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.handlers = []  # Clear any existing handlers
logger.addHandler(console_handler)
logger.addHandler(file_handler)

# Load configuration
with open('config.json') as config_file:
    config = json.load(config_file)

# Keyboards
INLINE_KEYBOARD = [
    [
        InlineKeyboardButton("–ú–æ–π –†–µ–π—Ç–∏–Ω–≥", callback_data='my_rating'),
        InlineKeyboardButton("–ì—Ä—É–ø–ø–∞", callback_data='group')
    ],
    [
        InlineKeyboardButton("–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", callback_data='disciplines'),
        InlineKeyboardButton("–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å", callback_data='settings')
    ]
]
INLINE_KEYBOARD_MARKUP = InlineKeyboardMarkup(INLINE_KEYBOARD)

REPLY_KEYBOARD = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
REPLY_KEYBOARD_MARKUP = ReplyKeyboardMarkup(REPLY_KEYBOARD, resize_keyboard=True, one_time_keyboard=False)

CANCEL_KEYBOARD = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_registration')]]
CANCEL_KEYBOARD_MARKUP = InlineKeyboardMarkup(CANCEL_KEYBOARD)

# Directory for course work files
COURSE_WORKS_DIR = 'course_works'
if not os.path.exists(COURSE_WORKS_DIR):
    os.makedirs(COURSE_WORKS_DIR)

# Database functions
def get_db_connection():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ with).
    """
    return sqlite3.connect('students.db')

def require_registration(async_func):
    @wraps(async_func)
    async def wrapper(update, context, *args, **kwargs):
        telegram_id = str(update.effective_user.id)
        is_registered, student_data = await check_registration(telegram_id)
        if not is_registered:
            await update.message.reply_text(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
                reply_markup=REPLY_KEYBOARD_MARKUP
            )
            return
        return await async_func(update, context, *args, **kwargs)
    return wrapper

def get_all_subjects_from_db():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(students)")
        columns = cursor.fetchall()
    subjects = []
    for col in columns:
        col_name = col[1]
        if col_name not in ['student_id', 'name', 'update_date', 'telegram_id', 'student_group', 'is_admin', 'backup_telegram_ids', 'last_parsed_time']:
            subject = col_name.split(' (–º–æ–¥—É–ª—å')[0]
            if subject not in subjects:
                subjects.append(subject)
    return subjects

def update_db_structure(new_subjects):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(students)")
        current_columns = [col[1] for col in cursor.fetchall()]
        for subject in new_subjects:
            for module in [' (–º–æ–¥—É–ª—å 1)', ' (–º–æ–¥—É–ª—å 2)']:
                col_name = f'{subject}{module}'
                if col_name not in current_columns:
                    safe_col_name = '"' + col_name.replace('"', '""') + '"'
                    cursor.execute(f'ALTER TABLE students ADD COLUMN {safe_col_name} TEXT DEFAULT "–Ω–µ –∏–∑—É—á–∞–µ—Ç"')
        conn.commit()

def get_subjects(soup):
    table = soup.find('table', id='user')
    if not table:
        return []
    rows = table.find_all('tr')
    if not rows or len(rows) < 1:
        return []
    headers = [header.text.strip() for header in rows[0].find_all('th')]
    return headers[1:-1] if len(headers) > 2 else []

def download_course_work_file(url, student_id, semester):
    """
    Download a course work file and save it to the course_works directory.
    Returns the local file path or None if download fails.
    """
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        original_filename = os.path.basename(url)
        # Create a unique filename to avoid conflicts
        base, ext = os.path.splitext(original_filename)
        unique_filename = f"{base}{ext}"
        file_path = os.path.join(COURSE_WORKS_DIR, unique_filename)
        file_path = os.path.normpath(file_path)
        with open(file_path, 'wb') as f:
            f.write(response.content)
        logger.info(f"Downloaded course work file: {file_path}")
        return file_path
    except Exception as e:
        logger.error(f"Error downloading course work file from {url}: {e}")
        return None

def save_course_work_to_db(student_id, name, telegram_id, student_group, discipline, file_path, semester):
    """
    Save course work details to the course_works table.
    Skip if the work already exists.
    """
    file_path = os.path.normpath(file_path) if file_path else file_path
    with get_db_connection() as conn:
        cursor = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        cursor.execute('''
            SELECT 1 FROM course_works 
            WHERE student_id = ? AND discipline = ? AND semester = ?
        ''', (student_id, discipline, semester))
        if cursor.fetchone():
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã: student_id {student_id}, discipline {discipline}, semester {semester}")
            return
            
        parsing_time = datetime.datetime.now().isoformat()
        cursor.execute('''
            INSERT INTO course_works (discipline, student_id, telegram_id, name, student_group, semester, file_path, parsing_time)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (discipline, student_id, telegram_id, name, student_group, semester, file_path, parsing_time))
        conn.commit()
        logger.info(f"Saved course work for student_id {student_id}, discipline {discipline}")

def validate_student_id(student_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞.
    Returns: (is_valid, error_message)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ student_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if not student_id.isdigit():
        return False, "–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–æ–±—ã—á–Ω–æ 8 —Ü–∏—Ñ—Ä)
    if len(student_id) != 8:
        return False, "–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8 —Ü–∏—Ñ—Ä"
    
    return True, None

def validate_group_format(group):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã.
    –§–æ—Ä–º–∞—Ç: 2-6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤, —Ç–∏—Ä–µ, 2-3 —Ü–∏—Ñ—Ä—ã
    Returns: (is_valid, error_message)
    """
    pattern = r'^[–ê-–Ø]{2,6}-\d{2,3}$'
    if not re.match(pattern, group):
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: –ü–ú–†-231, –ë–ò–û–†-221"
    return True, None

def validate_student_group(student_id, group):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ VUZ2.
    Returns: (is_valid, error_message)
    """
    url = f"http://vuz2.bru.by/rate/{student_id}/"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser', from_encoding='utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_message = soup.find('h2')
        if error_message and "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_message.text:
            return False, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ VUZ2"
            
        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞"

def parse_student_data(student_id, telegram_id=None, student_group=None, skip_existing_course_works=None):
    """
    Parse student data and course works from VUZ2 website.
    Returns: (name, grades, subjects, course_works)
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è student_id
    is_valid, error_message = validate_student_id(student_id)
    if not is_valid:
        logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π student_id: {student_id} - {error_message}")
        return "Unknown", {}, [], []

    # Parse student performance data
    url = f"http://vuz2.bru.by/rate/{student_id}/"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser', from_encoding='utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_message = soup.find('h2')
        if error_message and "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_message.text:
            logger.error(f"–°—Ç—É–¥–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ VUZ2")
            return "Unknown", {}, [], []
            
        data_box = soup.find('div', class_='box data')
        if data_box:
            name_tag = data_box.find('h1')
            full_name = name_tag.text.strip() if name_tag else "Unknown"
        else:
            full_name = "Unknown"
        last_name = full_name.split()[0] if full_name != "Unknown" and len(full_name.split()) > 0 else "Unknown"
        subjects = get_subjects(soup)
        if not subjects:
            grades = {}
        else:
            table = soup.find('table', id='user')
            rows = table.find_all('tr')
            grades = {}
            module_map = {'1-—ã–π –º–æ–¥—É–ª—å': '1', '2-–æ–π –º–æ–¥—É–ª—å': '2'}
            for module_label, module_num in module_map.items():
                module_row = next((row for row in rows if row.find('td') and row.find('td').text.strip() == module_label), None)
                if module_row:
                    module_cells = module_row.find_all('td')
                    if len(module_cells) > 1:
                        for i, subject in enumerate(subjects):
                            grade = module_cells[i + 1].text.strip() if i + 1 < len(module_cells) else '-'
                            grades[f"{subject} (–º–æ–¥—É–ª—å {module_num})"] = int(grade) if grade.isdigit() else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è ID {student_id}: {e}")
        return "Unknown", {}, [], []

    # Parse course work data
    course_works = []
    portfolio_url = f"http://vuz2.bru.by/rate/{student_id}/portfolio/1/"
    try:
        response = requests.get(portfolio_url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser', from_encoding='utf-8')
        portfolio_section = soup.find('div', class_='box data')
        if portfolio_section:
            ul = portfolio_section.find('ul')
            if ul:
                for li in ul.find_all('li'):
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ <a> (—Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ, –±–µ–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
                    li_text = ''
                    for content in li.contents:
                        if getattr(content, 'name', None) == 'a':
                            break
                        if isinstance(content, str):
                            li_text += content
                    semester_match = re.search(r'–°–µ–º–µ—Å—Ç—Ä: (\d+)', li_text)
                    discipline_match = re.search(r'–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: (.*)', li_text)
                    if semester_match and discipline_match:
                        semester = semester_match.group(1)
                        discipline = discipline_match.group(1).strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã
                        if skip_existing_course_works and (discipline, semester) in skip_existing_course_works:
                            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫—É—Ä—Å–æ–≤—É—é —Ä–∞–±–æ—Ç—É: {discipline}, —Å–µ–º–µ—Å—Ç—Ä {semester}")
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–∞–±–æ—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            course_works.append({
                                'discipline': discipline,
                                'semester': semester,
                                'file_path': skip_existing_course_works[(discipline, semester)]
                            })
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        with get_db_connection() as conn:
                            cursor = conn.cursor()
                            cursor.execute('''
                                SELECT file_path FROM course_works 
                                WHERE student_id = ? AND discipline = ? AND semester = ?
                            ''', (student_id, discipline, semester))
                            existing = cursor.fetchone()
                            if existing:
                                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã: {discipline}, —Å–µ–º–µ—Å—Ç—Ä {semester}")
                                # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                                if telegram_id:
                                    cursor.execute('''
                                        UPDATE course_works 
                                        SET telegram_id = ? 
                                        WHERE student_id = ? AND discipline = ? AND semester = ?
                                    ''', (telegram_id, student_id, discipline, semester))
                                    conn.commit()
                                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω telegram_id –¥–ª—è –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã: {discipline}, —Å–µ–º–µ—Å—Ç—Ä {semester}")
                                course_works.append({
                                    'discipline': discipline,
                                    'semester': semester,
                                    'file_path': existing[0]
                                })
                                continue
                            
                        # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–∫–∞—á–∏–≤–∞–µ–º –µ—ë
                        file_link = li.find('a')
                        if file_link and 'href' in file_link.attrs:
                            file_url = file_link['href']
                            if not file_url.startswith('http'):
                                file_url = f"http://vuz2.bru.by{file_url}"
                            file_path = download_course_work_file(file_url, student_id, semester)
                            if file_path:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                                save_course_work_to_db(
                                    student_id=student_id,
                                    name=full_name,
                                    telegram_id=telegram_id,
                                    student_group=student_group,
                                    discipline=discipline,
                                    file_path=file_path,
                                    semester=semester
                                )
                                course_works.append({
                                    'discipline': discipline,
                                    'semester': semester,
                                    'file_path': file_path
                                })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è ID {student_id}: {e}")

    return last_name, grades, subjects, course_works

def save_to_db(student_id, name, grades, subjects, telegram_id=None, student_group=None, is_admin=False):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        parse_time = datetime.datetime.now().isoformat()
        data = {
            'student_id': student_id,
            'name': name,
            'update_date': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'last_parsed_time': parse_time,
            'notifications': 1  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ notifications —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        if telegram_id:
            data['telegram_id'] = telegram_id
        if student_group is not None:
            data['student_group'] = student_group
        if is_admin:
            data['is_admin'] = 1
        db_subjects = get_all_subjects_from_db()
        new_subjects = [s for s in subjects if s not in db_subjects]
        if new_subjects:
            update_db_structure(new_subjects)
        cursor.execute("PRAGMA table_info(students)")
        for col in cursor.fetchall():
            col_name = col[1]
            if col_name in data:
                continue
            if "(–º–æ–¥—É–ª—å" in col_name:
                subject = col_name.split(' (–º–æ–¥—É–ª—å')[0]
                if subject in subjects:
                    data[col_name] = grades.get(col_name, None)
                else:
                    data[col_name] = "–Ω–µ –∏–∑—É—á–∞–µ—Ç"
        columns = ['"{}"'.format(k.replace('"', '""')) for k in data.keys()]
        query = f"""
        INSERT INTO students ({','.join(columns)}) 
        VALUES ({','.join(['?']*len(data))})
        ON CONFLICT(student_id) DO UPDATE SET {','.join(['"{}"=?'.format(k.replace('"', '""')) for k in data.keys()])}
        """
        cursor.execute(query, list(data.values())*2)
        conn.commit()

async def save_to_db_async(*args, **kwargs):
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, save_to_db, *args, **kwargs)

async def check_registration(telegram_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT student_id, student_group, is_admin FROM students WHERE telegram_id=?', (telegram_id,))
        result = cursor.fetchone()
        return bool(result), result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False, None
    finally:
        conn.close()

def format_discipline_name(name, max_length=25):
    name = name.split(' (–º–æ–¥—É–ª—å')[0].strip()
    if len(name) > max_length:
        return name[:max_length-3] + '...'
    return name.ljust(max_length)

def format_ratings_table(name, data, is_group=False):
    if not is_group:
        disciplines = {}
        for key, value in data.items():
            if "(–º–æ–¥—É–ª—å" in str(key) and value not in ["–Ω–µ –∏–∑—É—á–∞–µ—Ç", None, "None"]:
                parts = str(key).split(' (–º–æ–¥—É–ª—å ')
                if len(parts) == 2:
                    disc_name = parts[0]
                    module = parts[1].replace(')', '')
                    if disc_name not in disciplines:
                        disciplines[disc_name] = {'1': '-', '2': '-'}
                    disciplines[disc_name][module] = value
        table = f"<pre>–†–µ–π—Ç–∏–Ω–≥ {name}:\n"
        table += "="*45 + "\n"
        table += "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞".ljust(25) + " | –ú1 | –ú2\n"
        table += "-"*45 + "\n"
        for disc_name in sorted(disciplines.keys()):
            grades = disciplines[disc_name]
            formatted_name = format_discipline_name(disc_name)
            m1 = str(grades['1']) if '1' in grades and grades['1'] != '-' else ' -'
            m2 = str(grades['2']) if '2' in grades and grades['2'] != '-' else ' -'
            table += f"{formatted_name} | {m1.rjust(2)} | {m2.rjust(2)}\n"
        table += "</pre>"
        return table
    else:
        table = f"<pre>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {name}:\n"
        table += "="*45 + "\n"
        table += "–°—Ç—É–¥–µ–Ω—Ç".ljust(25) + " | –ú1 | –ú2\n"
        table += "-"*45 + "\n"
        for student_name, grades in data:
            m1 = str(grades[f"{name} (–º–æ–¥—É–ª—å 1)"]) if grades[f"{name} (–º–æ–¥—É–ª—å 1)"] != "-" else " -"
            m2 = str(grades[f"{name} (–º–æ–¥—É–ª—å 2)"]) if grades[f"{name} (–º–æ–¥—É–ª—å 2)"] != "-" else " -"
            formatted_name = student_name[:22] + "..." if len(student_name) > 25 else student_name.ljust(25)
            table += f"{formatted_name} | {m1.rjust(2)} | {m2.rjust(2)}\n"
        table += "</pre>"
        return table

async def show_student_rating(update, student_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM students WHERE student_id=?", (student_id,))
        row = cursor.fetchone()
        if not row:
            await update.message.reply_text("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        columns = [desc[0] for desc in cursor.description]
        student_data = dict(zip(columns, row))
        name = student_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        message = format_ratings_table(name, student_data)
        if hasattr(update, 'message'):
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=REPLY_KEYBOARD_MARKUP)
        else:
            await update.reply_text(message, parse_mode='HTML', reply_markup=REPLY_KEYBOARD_MARKUP)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        if hasattr(update, 'message'):
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await update.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        conn.close()

async def retry_on_timeout(func, max_retries=3, base_delay=1):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é"""
    last_error = None
    for attempt in range(max_retries):
        try:
            return await func()
        except (TimedOut, NetworkError) as e:
            last_error = e
            if attempt == max_retries - 1:
                raise last_error
            
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å —Å–ª—É—á–∞–π–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
            delay = base_delay * (2 ** attempt)
            jitter = random.uniform(0, min(delay * 0.1, 1.0))  # 10% —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
            total_delay = delay + jitter
            
            logger.warning(
                f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__}, "
                f"–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. "
                f"–û—à–∏–±–∫–∞: {str(e)}. "
                f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {total_delay:.1f} —Å–µ–∫"
            )
            await asyncio.sleep(total_delay)
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if last_error:
        raise last_error
    raise RuntimeError("Unexpected error in retry_on_timeout")

def handle_telegram_timeout(max_retries=5, base_delay=2):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö"""
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(update, context, *args, **kwargs):
            async def attempt():
                return await func(update, context, *args, **kwargs)
            try:
                return await retry_on_timeout(attempt, max_retries, base_delay)
            except (TimedOut, NetworkError) as e:
                user_id = update.effective_user.id if update and update.effective_user else "Unknown"
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: "
                    f"{type(e).__name__} - {str(e)}"
                )
                if update and hasattr(update, 'message') and update.message:
                    try:
                        await update.message.reply_text(
                            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                        )
                    except Exception as reply_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}")
                elif update and hasattr(update, 'callback_query') and update.callback_query:
                    try:
                        await update.callback_query.answer(
                            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                            show_alert=True
                        )
                    except Exception as answer_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback: {answer_error}")
                raise
            except Exception as e:
                user_id = update.effective_user.id if update and update.effective_user else "Unknown"
                logger.error(
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: "
                    f"{type(e).__name__} - {str(e)}\n{traceback.format_exc()}"
                )
                raise
        return wrapper
    return decorator

async def safe_send_message(message_obj, text, reply_markup=None, parse_mode=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    async def send_attempt():
        return await message_obj.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    try:
        return await retry_on_timeout(send_attempt)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            return await message_obj.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
            return None

async def safe_edit_message(message_obj, text, reply_markup=None, parse_mode=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    async def edit_attempt():
        return await message_obj.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    try:
        return await retry_on_timeout(edit_attempt)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return None

async def send_notification_to_users(application):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ—Ç–æ—Ä—ã—Ö notifications=1
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        with open('notification.txt', 'r', encoding='utf-8') as f:
            notification_text = f.read()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT telegram_id FROM students WHERE notifications=1 AND telegram_id IS NOT NULL AND telegram_id != "added by admin" AND telegram_id != "added_by_superadmin"')
            users = cursor.fetchall()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_count = 0
        fail_count = 0
        for (user_telegram_id,) in users:
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ telegram_id
                if not user_telegram_id.isdigit():
                    continue

                await application.bot.send_message(
                    chat_id=int(user_telegram_id),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                    text=notification_text,
                    parse_mode='HTML',
                    disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
                )
                success_count += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
                fail_count += 1
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        return True, success_count, fail_count
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False, 0, 0